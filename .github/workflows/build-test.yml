# This yml is used for PRs, insiders build, and release build.
# We use the github.event_name to determine what started the workflow to determine which
# situation we are in.

name: Build and Test

on:
  pull_request:
    branches:
      - main
      - 'release'
      - 'release/*'
      - 'release-*'
  check_run:
    types: [rerequested, requested_action]
  push:
    branches:
      - main
      - 'release'
      - 'release/*'
      - 'release-*'
  schedule:
    - cron: "0 9 * * 1-5" # 9am UTC, Monday-Friday (2am PDT, after VS Code Insider builds which is 11pm PDT)
  workflow_dispatch:
env:
  NODE_VERSION: 12.14.1
  PYTHON_VERSION: 3.8
  JULIA_VERSION: 1.5.2
  MOCHA_REPORTER_JUNIT: true # Use the mocha-multi-reporters and send output to both console (spec) and JUnit (mocha-junit-reporter). Also enables a reporter which exits the process running the tests if it haven't already.
  CACHE_NPM_DEPS: cache-npm
  CACHE_OUT_DIRECTORY: cache-out-directory
  CACHE_PIP_DEPS: cache-pip
  VSC_JUPYTER_FORCE_LOGGING: 'true'
  VSC_JUPYTER_CI_RUN_NON_PYTHON_NB_TEST: 'true'
  # Key for the cache created at the end of the the 'Cache ./pythonFiles/lib/python' step.
  CACHE_PYTHONFILES: cache-pvsc-pythonFiles
  COVERAGE_REPORTS: tests-coverage-reports
  TEST_RESULTS_DIRECTORY: .
  TEST_RESULTS_GLOB: '**/test-results*.xml'
  IPYWIDGET_SCREENSHOT_PATH: '*-screenshot.png'
  DISABLE_INSIDERS_EXTENSION: 1 # Disable prompts to install Insiders in tests (else it blocks activation of extension).
  VSC_JUPYTER_INSTRUMENT_CODE_FOR_COVERAGE: true

jobs:
  pick_environment:
    name: Pick Environment
    runs-on: ubuntu-latest
    outputs:
      vsix_name: ${{ env.vsix_name }}
      test_matrix_os: ${{ env.test_matrix_os }}
      release_channel: ${{ env.release_channel }}
    if: github.repository == 'microsoft/vscode-jupyter'
    steps:
      - name: dump_event
        run: |
          echo "Event_name is ${{ github.event_name }}"
          echo "Ref is ${{ github.ref }}"

      - name: pr
        if: github.event_name == 'pull_request'
        run: |
          echo "vsix_name=ms-toolsai-jupyter-insiders.vsix" >> $GITHUB_ENV
          echo "test_matrix_os=[\"ubuntu-latest\"]" >> $GITHUB_ENV

      - name: insiders
        if: (github.event_name == 'push' || github.event_name == 'schedule') && github.ref == 'refs/heads/main'
        # We're not running CI on macOS for now because it's one less matrix entry to lower the number of runners used,
        # macOS runners are expensive, and we assume that Ubuntu is enough to cover the UNIX case.
        run: |
          echo "vsix_name=ms-toolsai-jupyter-insiders.vsix" >> $GITHUB_ENV
          echo "test_matrix_os=[\"ubuntu-latest\", \"windows-latest\"]" >> $GITHUB_ENV

      - name: insiders channel
        # Scheduled builds will publish Insider builds.
        if: github.event_name == 'schedule' && github.ref == 'refs/heads/main'
        run: |
          echo "release_channel=insider" >> $GITHUB_ENV

      - name: release
        if: github.event_name == 'push' && contains(github.ref, 'refs/heads/release')
        run: |
          echo "vsix_name=ms-toolsai-jupyter-release.vsix" >> $GITHUB_ENV
          echo "test_matrix_os=[\"ubuntu-latest\"]" >> $GITHUB_ENV

      - name: release channel
        # All pushes to release can push to marketplace place with the words `release` `publish` in commit.
        if: github.event_name == 'push' && contains(github.ref, 'refs/heads/release') && contains(github.event.head_commit.message, 'release') && contains(github.event.head_commit.message, 'publish')
        run: |
          echo "release_channel=stable" >> $GITHUB_ENV

  build-vsix:
    needs: pick_environment
    name: Build VSIX
    runs-on: ubuntu-latest
    # if: github.repository == 'microsoft/vscode-jupyter'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Use Python ${{env.PYTHON_VERSION}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}

      # Caching of npm packages (https://github.com/actions/cache/blob/main/examples.md#node---npm)
      - name: Cache npm on linux/mac
        uses: actions/cache@v2.1.4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Python libs
        run: |
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r ./requirements.txt

      - name: Build VSIX
        uses: ./.github/actions/build-vsix
        id: build-vsix

      - name: Rename VSIX for release branch
        if: steps.build-vsix.outputs.path != needs.pick_environment.outputs.vsix_name
        run: mv ${{ steps.build-vsix.outputs.path }} ${{ needs.pick_environment.outputs.vsix_name }}

      - uses: actions/upload-artifact@v2
        with:
          name: ${{needs.pick_environment.outputs.vsix_name}}
          path: ${{needs.pick_environment.outputs.vsix_name}}
