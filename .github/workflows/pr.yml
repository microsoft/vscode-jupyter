name: Pull Request

on:
  pull_request:
    branches:
      - main
  check_run:
    types: [rerequested, requested_action]
  workflow_dispatch:

env:
  NODE_VERSION: 12.14.1
  PYTHON_VERSION: 3.8
  JULIA_VERSION: 1.5.2
  MOCHA_REPORTER_JUNIT: true # Use the mocha-multi-reporters and send output to both console (spec) and JUnit (mocha-junit-reporter). Also enables a reporter which exits the process running the tests if it haven't already.
  CACHE_NPM_DEPS: cache-npm
  CACHE_OUT_DIRECTORY: cache-out-directory
  CACHE_PIP_DEPS: cache-pip
  VSC_JUPYTER_FORCE_LOGGING: 'true'
  VSC_JUPYTER_CI_RUN_NON_PYTHON_NB_TEST: 'true'
  # Key for the cache created at the end of the the 'Cache ./pythonFiles/lib/python' step.
  CACHE_PYTHONFILES: cache-pvsc-pythonFiles
  VSIX_NAME: ms-toolsai-jupyter-insiders.vsix
  COVERAGE_REPORTS: tests-coverage-reports
  CI_PYTHON_PATH: python
  TEST_RESULTS_DIRECTORY: .
  TEST_RESULTS_GLOB: '**/test-results*.xml'
  IPYWIDGET_SCREENSHOT_PATH: '*-screenshot.png'
  DISABLE_INSIDERS_EXTENSION: 1 # Disable prompts to install Insiders in tests (else it blocks activation of extension).

jobs:
  build-vsix:
    name: Build VSIX
    runs-on: windows-latest
    if: github.repository == 'microsoft/vscode-jupyter'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Use Python ${{env.PYTHON_VERSION}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}

      # Caching of npm packages (https://github.com/actions/cache/blob/main/examples.md#node---npm)
      - name: Cache npm on linux/mac
        uses: actions/cache@v2
        if: matrix.os != 'windows-latest'
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Get npm cache directory
        if: matrix.os == 'windows-latest'
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: Cache npm on windows
        uses: actions/cache@v2
        if: matrix.os == 'windows-latest'
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Python libs
        run: |
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r ./requirements.txt

      - name: Build VSIX
        uses: ./.github/actions/build-vsix
        id: build-vsix

      - name: Rename VSIX
        if: steps.build-vsix.outputs.path != env.VSIX_NAME
        run: mv ${{ steps.build-vsix.outputs.path }} ${{ env.VSIX_NAME }}

      - uses: actions/upload-artifact@v2
        with:
          name: ${{env.VSIX_NAME}}
          path: ${{env.VSIX_NAME}}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    if: github.repository == 'microsoft/vscode-jupyter'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache pip files
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{runner.os}}-${{env.CACHE_PIP_DEPS}}-${{env.PYTHON_VERSION}}

      - name: Cache npm files
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

      - name: Install dependencies (npm ci)
        run: npm ci --prefer-offline

      - name: Run linting on TypeScript code
        run: npx tslint --project tsconfig.json

      - name: Run prettier on TypeScript code
        run: npx prettier 'src/**/*.ts*' --check

      - name: Run prettier on JavaScript code
        run: npx prettier 'build/**/*.js' --check

      - name: Use Python ${{env.PYTHON_VERSION}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Run Black on Python code
        run: |
          python -m pip install -U black
          python -m black . --check
        working-directory: pythonFiles

      - name: Run gulp prePublishNonBundle
        run: npx gulp prePublishNonBundle

      - name: Cache the out/ directory
        uses: actions/cache@v2
        with:
          path: ./out
          key: ${{runner.os}}-${{env.CACHE_OUT_DIRECTORY}}-${{hashFiles('src/**')}}

      - name: Check dependencies
        run: npm run checkDependencies

  ts_tests:
    name: Type Script Tests
    runs-on: ${{ matrix.os }}
    if: github.repository == 'microsoft/vscode-jupyter'
    strategy:
      fail-fast: false
      matrix:
        # We're not running CI on macOS for now because it's one less matrix entry to lower the number of runners used,
        # macOS runners are expensive, and we assume that Ubuntu is enough to cover the UNIX case.
        os: [ubuntu-latest, windows-latest]
        test-suite: [ts-unit]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{env.NODE_VERSION}}

      # Caching of npm packages (https://github.com/actions/cache/blob/main/examples.md#node---npm)
      - name: Cache npm on linux/mac
        uses: actions/cache@v2
        if: matrix.os != 'windows-latest'
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Get npm cache directory
        if: matrix.os == 'windows-latest'
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: Cache npm on windows
        uses: actions/cache@v2
        if: matrix.os == 'windows-latest'
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache compiled TS files
        # Use an id for this step so that its cache-hit output can be accessed and checked in the next step.
        id: out-cache
        uses: actions/cache@v2
        with:
          path: ./out
          key: ${{runner.os}}-${{env.CACHE_OUT_DIRECTORY}}-${{hashFiles('src/**')}}

      - name: Install dependencies (npm ci)
        run: npm ci --prefer-offline

      - name: Compile if not cached
        run: npx gulp prePublishNonBundle
        env:
            CI_JUPYTER_FAST_COMPILATION: 'true'

        # if: steps.out-cache.outputs.cache-hit == false
      - name: Run TypeScript unit tests
        id: test_unittests
        run: npm run test:unittests:cover

      - name: Publish Test Report
        uses: scacap/action-surefire-report@v1
        if: steps.test_unittests.outcome == 'failure' && failure()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: ${{ env.TEST_RESULTS_GLOB }}
          check_name: Ts-Unit Test Report

  tests:
    name: Functional Jupyter Tests
    runs-on: ${{ matrix.os }}
    if: github.repository == 'microsoft/vscode-jupyter'
    strategy:
      fail-fast: false
      matrix:
        # We're not running CI on macOS for now because it's one less matrix entry to lower the number of runners used,
        # macOS runners are expensive, and we assume that Ubuntu is enough to cover the UNIX case.
        os: [ubuntu-latest]
        python: [3.8]
        test-suite: [group1, group2, group3, group4]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Python ${{matrix.python}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python}}

      - name: Upgrade pip
        run: python -m pip install -U pip

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{env.NODE_VERSION}}

      # Start caching

      # Cache Python Dependencies.
      # Caching (https://github.com/actions/cache/blob/main/examples.md#python---pip
      - name: Cache pip on linux
        uses: actions/cache@v2
        if: matrix.os == 'ubuntu-latest'
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-${{ hashFiles('requirements.txt') }}-${{hashFiles('build/debugger-install-requirements.txt')}}-${{hashFiles('test-requirements.txt')}}-${{hashFiles('ipython-test-requirements.txt')}}-${{hashFiles('functional-test-requirements.txt')}}-${{hashFiles('conda-functional-requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-

      - name: Cache pip on mac
        uses: actions/cache@v2
        if: matrix.os == 'macos-latest'
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-${{ hashFiles('requirements.txt') }}-${{hashFiles('build/debugger-install-requirements.txt')}}-${{hashFiles('test-requirements.txt')}}-${{hashFiles('ipython-test-requirements.txt')}}-${{hashFiles('functional-test-requirements.txt')}}-${{hashFiles('conda-functional-requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-

      - name: Cache pip on windows
        uses: actions/cache@v2
        if: matrix.os == 'windows-latest'
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-${{ hashFiles('requirements.txt') }}-${{hashFiles('build/debugger-install-requirements.txt')}}-${{hashFiles('test-requirements.txt')}}-${{hashFiles('ipython-test-requirements.txt')}}-${{hashFiles('functional-test-requirements.txt')}}-${{hashFiles('conda-functional-requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-

      # Caching of npm packages (https://github.com/actions/cache/blob/main/examples.md#node---npm)
      - name: Cache npm on linux/mac
        uses: actions/cache@v2
        if: matrix.os != 'windows-latest'
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Get npm cache directory
        if: matrix.os == 'windows-latest'
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: Cache npm on windows
        uses: actions/cache@v2
        if: matrix.os == 'windows-latest'
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache compiled TS files
        id: out-cache
        uses: actions/cache@v2
        with:
          path: ./out
          key: ${{runner.os}}-${{env.CACHE_OUT_DIRECTORY}}-${{hashFiles('src/**')}}

      # For faster/better builds of sdists.
      - run: python -m pip install wheel
        shell: bash

      # debugpy is not shipped, only installed for local tests.
      # In production, we get debugpy from python extension.
      - name: Install Python Libs
        run: |
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r ./requirements.txt
          python -m pip --disable-pip-version-check install -r build/debugger-install-requirements.txt
          python ./pythonFiles/install_debugpy.py
          python -m pip install numpy
          python -m pip install --upgrade jupyter
          python -m pip install --upgrade -r build/test-requirements.txt
          python -m pip install --upgrade -r ./build/ipython-test-requirements.txt
          python -m pip install --upgrade -r ./build/conda-functional-requirements.txt
          python -m ipykernel install --user
        # This step is slow.

      - name: Install dependencies (npm ci)
        run: npm ci --prefer-offline
        # This step is slow.
      - name: Install Julia
        uses: julia-actions/setup-julia@v1
        with:
          version: ${{env.JULIA_VERSION}}

      - name: Install Julia Kernel
        run: |
          julia -e '
            using Pkg
            Pkg.add("IJulia")'

      - name: Compile if not cached
        run: npx gulp prePublishNonBundle
        env:
            CI_JUPYTER_FAST_COMPILATION: 'true'

      - name: Print out notebook directory
        run: |
          ls ./out/datascience-ui/notebook

      - name: Run functional tests
        run: npm run test:functional:parallel -- --${{matrix.test-suite}}
        env:
          VSC_FORCE_REAL_JUPYTER: 1
          VSC_JUPYTER_FORCE_LOGGING: 1
        id: test_functional_group

      - name: Upload screenshots
        uses: actions/upload-artifact@v2
        if: steps.test_functional_group.outcome == 'failure' && failure()
        with:
          path: './${{env.IPYWIDGET_SCREENSHOT_PATH}}'


      - name: Publish Test Report
        uses: scacap/action-surefire-report@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: ${{ env.TEST_RESULTS_GLOB }}
          check_name: Functional Test Report ${{matrix.test-suite}}
        if: steps.test_functional_group.outcome == 'failure' && failure()

  vscodeTests:
    name: VS Code Tests # These tests run with Python extension & real Jupyter
    runs-on: ${{ matrix.os }}
    if: github.repository == 'microsoft/vscode-jupyter'
    env:
        VSC_FORCE_REAL_JUPYTER: 1
        VSC_JUPYTER_CI_RUN_NON_PYTHON_NB_TEST: 1
    strategy:
      fail-fast: false
      matrix:
        # We're not running CI on macOS for now because it's one less matrix entry to lower the number of runners used,
        # macOS runners are expensive, and we assume that Ubuntu is enough to cover the UNIX case.
        os: [ubuntu-latest]
        python: [3.8] # Use flaky tests to run against more versions of Python.
        # integration: Tests with VS Code, Python extension & real Jupyter
        # notebook: Notebook Tests with VS Code, Python extension & real Jupyter
        test-suite: [integration, notebook, notebookWithoutPythonExt]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Python ${{matrix.python}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python}}
        if: matrix.test-suite == 'integration' || matrix.test-suite == 'notebook'

      - name: Upgrade pip
        run: python -m pip install -U pip
        if: matrix.test-suite == 'integration' || matrix.test-suite == 'notebook'

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{env.NODE_VERSION}}

      # Start caching

      # Cache Python Dependencies.
      # Caching (https://github.com/actions/cache/blob/main/examples.md#python---pip
      - name: Cache pip on linux
        uses: actions/cache@v2
        if: matrix.os == 'ubuntu-latest' && (matrix.test-suite == 'integration' || matrix.test-suite == 'notebook')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-${{ hashFiles('requirements.txt') }}-${{hashFiles('build/debugger-install-requirements.txt')}}-${{hashFiles('test-requirements.txt')}}-${{hashFiles('ipython-test-requirements.txt')}}-${{hashFiles('functional-test-requirements.txt')}}-${{hashFiles('conda-functional-requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-

      - name: Cache pip on mac
        uses: actions/cache@v2
        if: matrix.os == 'macos-latest' && (matrix.test-suite == 'integration' || matrix.test-suite == 'notebook')
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-${{ hashFiles('requirements.txt') }}-${{hashFiles('build/debugger-install-requirements.txt')}}-${{hashFiles('test-requirements.txt')}}-${{hashFiles('ipython-test-requirements.txt')}}-${{hashFiles('functional-test-requirements.txt')}}-${{hashFiles('conda-functional-requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-

      - name: Cache pip on windows
        uses: actions/cache@v2
        if: matrix.os == 'windows-latest' && (matrix.test-suite == 'integration' || matrix.test-suite == 'notebook')
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-${{ hashFiles('requirements.txt') }}-${{hashFiles('build/debugger-install-requirements.txt')}}-${{hashFiles('test-requirements.txt')}}-${{hashFiles('ipython-test-requirements.txt')}}-${{hashFiles('functional-test-requirements.txt')}}-${{hashFiles('conda-functional-requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-

      # Caching of npm packages (https://github.com/actions/cache/blob/main/examples.md#node---npm)
      - name: Cache npm on linux/mac
        uses: actions/cache@v2
        if: matrix.os != 'windows-latest'
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Get npm cache directory
        if: matrix.os == 'windows-latest'
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: Cache npm on windows
        uses: actions/cache@v2
        if: matrix.os == 'windows-latest'
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache compiled TS files
        id: out-cache
        uses: actions/cache@v2
        with:
          path: ./out
          key: ${{runner.os}}-${{env.CACHE_OUT_DIRECTORY}}-${{hashFiles('src/**')}}

      # For faster/better builds of sdists.
      - run: python -m pip install wheel
        shell: bash
        if: matrix.test-suite == 'integration' || matrix.test-suite == 'notebook'

      # debugpy is not shipped, only installed for local tests.
      # In production, we get debugpy from python extension.
      - name: Install Python Libs
        run: |
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r ./requirements.txt
          python -m pip --disable-pip-version-check install -r build/debugger-install-requirements.txt
          python ./pythonFiles/install_debugpy.py
          python -m pip install numpy
          python -m pip install --upgrade jupyter
          python -m pip install --upgrade -r build/test-requirements.txt
          python -m pip install --upgrade -r ./build/ipython-test-requirements.txt
          python -m pip install --upgrade -r ./build/conda-functional-requirements.txt
          python -m ipykernel install --user
        if: matrix.test-suite == 'integration' || matrix.test-suite == 'notebook'
        # This step is slow.

      - name: Install dependencies (npm ci)
        run: npm ci --prefer-offline
        # This step is slow.

      - name: Compile if not cached
        run: npx gulp prePublishNonBundle
        env:
            VSC_CI_MATRIX_TEST_SUITE: ${{matrix.test-suite}}
            CI_JUPYTER_FAST_COMPILATION: 'true'


      # Used by tests for non-python kernels.
      # Test are enabled via env variable `VSC_JUPYTER_CI_RUN_NON_PYTHON_NB_TEST`
      - name: Install Julia
        uses: julia-actions/setup-julia@v1
        with:
          version: ${{env.JULIA_VERSION}}

      - name: Install Julia Kernel
        run: |
          julia -e '
            using Pkg
            Pkg.add("IJulia")'

      - name: Create Virtual Env for Tests
        uses: ./.github/actions/create-venv-for-tests
        if: matrix.test-suite == 'integration' || matrix.test-suite == 'notebook'

      - name: Run tests with VSCode & Jupyter
        uses: GabrielBB/xvfb-action@v1.4
        with:
          run: npm run testVSCode
        env:
          VSC_FORCE_REAL_JUPYTER: 1
          VSC_JUPYTER_FORCE_LOGGING: 1
          VSC_JUPYTER_CI_RUN_NON_PYTHON_NB_TEST: 1
        id: test_vscode
        if: matrix.test-suite == 'integration'

      - name: Publish VSCode Test Report
        uses: scacap/action-surefire-report@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: ${{ env.TEST_RESULTS_GLOB }}
          check_name: VSCode Test Report
        if: steps.test_vscode.outcome == 'failure' && failure()

      - name: Run Native Notebook with VSCode & Jupyter
        uses: GabrielBB/xvfb-action@v1.4
        with:
          run: npm run testNativeNotebooksInVSCode
        env:
          VSC_FORCE_REAL_JUPYTER: 1
          VSC_JUPYTER_FORCE_LOGGING: 1
          VSC_JUPYTER_CI_RUN_NON_PYTHON_NB_TEST: 1
          VSC_JUPYTER_CI_TEST_VSC_CHANNEL: 'insiders'
        id: test_notebook_vscode
        if: matrix.test-suite == 'notebook'

      - name: Publish Notebook Test Report
        uses: scacap/action-surefire-report@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: ${{ env.TEST_RESULTS_GLOB }}
          check_name: Notebook Test Report
        if: steps.test_notebook_vscode.outcome == 'failure' && failure()

      - name: Run Native Notebook with VSCode & Jupyter (without Python)
        uses: GabrielBB/xvfb-action@v1.4
        with:
          run: npm run testNativeNotebooksWithoutPythonInVSCode
        env:
          VSC_FORCE_REAL_JUPYTER: 1
          VSC_JUPYTER_FORCE_LOGGING: 1
          VSC_JUPYTER_CI_RUN_NON_PYTHON_NB_TEST: 1
          VSC_JUPYTER_CI_TEST_VSC_CHANNEL: 'insiders'
        id: test_notebookWithoutPythonExt_vscode
        if: matrix.test-suite == 'notebookWithoutPythonExt'

      - name: Publish Notebook Test Report
        uses: scacap/action-surefire-report@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: ${{ env.TEST_RESULTS_GLOB }}
          check_name: Notebook without Python Test Report
        if: steps.test_notebookWithoutPythonExt_vscode.outcome == 'failure' && failure()


  smoke-tests:
    name: Smoke tests
    # The value of runs-on is the OS of the current job (specified in the strategy matrix below) instead of being hardcoded.
    runs-on: ${{ matrix.os }}
    if: github.repository == 'microsoft/vscode-jupyter'
    needs: [build-vsix]
    strategy:
      fail-fast: false
      matrix:
        # We're not running CI on macOS for now because it's one less matrix entry to lower the number of runners used,
        # macOS runners are expensive, and we assume that Ubuntu is enough to cover the UNIX case.
        # os: [ubuntu-latest, windows-latest]
        os: [ubuntu-latest]
        python: [3.8]
    steps:
      - name: Use Python ${{matrix.python}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python}}
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Python ${{matrix.python}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python}}

      - name: Upgrade pip
        run: python -m pip install -U pip

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.1.2
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Download VSIX
        uses: actions/download-artifact@v2
        with:
          name: ${{env.VSIX_NAME}}

      - name: Install dependencies (npm ci)
        run: npm ci --prefer-offline

      - name: Install test requirements
        run: |
          python -m pip install numpy
          python -m pip install --upgrade jupyter

      # Compile the test files.
      - name: Prepare for smoke tests
        run: npx tsc -p ./
        shell: bash

      - name: Run smoke tests
        env:
          DISPLAY: 10
        uses: GabrielBB/xvfb-action@v1.4
        with:
          run: node --no-force-async-hooks-checks ./out/test/smokeTest.js
