# To use this step template from a job, use the following code:
# ```yaml
# steps:
#   template: path/to/this/dir/test_phases.yml
# ```
#
# Your job using this template *must* supply these values:
# - TestsToRun: 'testA, testB, ..., testN' - the list of tests to execute, see the list above.
#
# Your job using this template *may* supply these values:
# - NeedsPythonTestReqs: [true|false] - install the test-requirements prior to running tests. False if not set.
# - NeedsPythonFunctionalReqs: [true|false] - install the functional-requirements prior to running tests. False if not set.
# - NeedsIPythonReqs: [true|false] - install the ipython-test-requirements prior to running tests. False if not set.
# - PythonVersion: 'M.m' - the Python version to run. DefaultPythonVersion (from globals.yml) if not set.
# - NodeVersion: 'x.y.z' - Node version to use. DefaultNodeVersion (from globals.yml) if not set.

## Supported `TestsToRun` values, multiples are allowed separated by commas or spaces:
#
# 'testUnitTests'
# 'pythonUnitTests'
# 'pythonInternalTools'
# 'testSingleWorkspace'
# 'testDebugger'
# 'testFunctional'
# 'testPerformance'
# 'venvTests'

steps:
  - template: steps/initialization.yml
    parameters:
      PythonVersion: $(PythonVersion)
      workingDirectory: $(Build.SourcesDirectory)
      compile: 'false'
      sqlite: $(NeedsIPythonReqs)

  # When running unit tests, we need to just compile extension code (not webviews & the like).
  - task: Gulp@0
    displayName: 'gulp compile'
    inputs:
      targets: 'compile'
    condition: and(succeeded(), contains(variables['TestsToRun'], 'testUnitTests'))

  # Run the `prePublishNonBundle` gulp task to build the binaries we will be testing.
  # This produces the .js files required into the out/ folder.
  # Example command line (windows pwsh):
  # > gulp prePublishNonBundle
  - task: Gulp@0
    displayName: 'gulp prePublishNonBundle'
    inputs:
      targets: 'prePublishNonBundle'
    condition: and(succeeded(), not(contains(variables['TestsToRun'], 'testSmoke')), not(contains(variables['TestsToRun'], 'testUnitTests')))

  # Run the typescript unit tests.
  #
  # This will only run if the string 'testUnitTests' exists in variable `TestsToRun`
  #
  # Example command line (windows pwsh):
  # > npm run test:unittests:cover
  - bash: |
      npm run test:unittests:cover
    displayName: 'run test:unittests'
    condition: and(succeeded(), contains(variables['TestsToRun'], 'testUnitTests'))

  # Upload the test results to Azure DevOps to facilitate test reporting in their UX.
  - task: PublishTestResults@2
    displayName: 'Publish test:unittests results'
    condition: contains(variables['TestsToRun'], 'testUnitTests')
    inputs:
      testResultsFiles: '$(MOCHA_FILE)'
      testRunTitle: 'unittests-$(Agent.Os)-Py$(pythonVersion)'
      buildPlatform: '$(Agent.Os)-Py$(pythonVersion)'
      buildConfiguration: 'UnitTests'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/.nyc_output'
      targetFolder: '$(Build.ArtifactStagingDirectory)/nyc/.nyc_output'
    displayName: 'Copy nyc_output to publish as artificat'
    condition: contains(variables['TestsToRun'], 'testUnitTests')

  # Upload Code Coverage Results (to be merged later).
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/nyc'
      artifactName: 'coverage-output-$(Agent.Os)'
    condition: contains(variables['TestsToRun'], 'testUnitTests')

  - template: steps/generate_upload_coverage.yml

  # Install the requirements for the Python or the system tests. This includes the supporting libs that
  # we ship in our extension such as DEBUGPY and Jedi.
  #
  # This task will only run if variable `NeedsPythonTestReqs` is true.
  #
  # Example command line (windows pwsh):
  # > python -m pip install -m -U pip
  # > python -m pip install --upgrade -r build/test-requirements.txt
  # > python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
  - bash: |
      python -m pip install --upgrade -r build/test-requirements.txt
    #   python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
    #   python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade --pre debugpy
    displayName: 'pip install system test requirements'
    condition: and(succeeded(), eq(variables['NeedsPythonTestReqs'], 'true'))

  # Install the requirements for functional tests.
  #
  # This task will only run if variable `NeedsPythonFunctionalReqs` is true.
  #
  # Example command line (windows pwsh):
  # > python -m pip install numpy
  # > python -m pip install --upgrade -r build/functional-test-requirements.txt
  # > python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
  - bash: |
      python -m pip install numpy
      python -m pip install --upgrade -r ./build/functional-test-requirements.txt
      python -c "import sys;print(sys.executable)"
    displayName: 'pip install functional requirements'
    condition: and(succeeded(), eq(variables['NeedsPythonFunctionalReqs'], 'true'))

  # Add CONDA to the path so anaconda works
  #
  # This task will only run if variable `NeedsPythonFunctionalReqs` is true.
  - bash: |
      echo "##vso[task.prependpath]$CONDA/bin"
    displayName: 'Add conda to the path'
    condition: and(succeeded(), eq(variables['NeedsPythonFunctionalReqs'], 'true'), ne(variables['Agent.Os'], 'Windows_NT'))

  # Add CONDA to the path so anaconda works (windows)
  #
  # This task will only run if variable `NeedsPythonFunctionalReqs` is true.
  - powershell: |
      Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: 'Add conda to the path'
    condition: and(succeeded(), eq(variables['NeedsPythonFunctionalReqs'], 'true'), eq(variables['Agent.Os'], 'Windows_NT'))

  # On MAC let CONDA update install paths
  - bash: |
      sudo chown -R $USER $CONDA
    displayName: 'Give CONDA permission to its own files'
    condition: and(succeeded(), eq(variables['Agent.Os'], 'Darwin'))

  # Create the two anaconda environments
  #
  # This task will only run if variable `NeedsPythonFunctionalReqs` is true.
  #
  - script: |
      conda env create --quiet --force --file build/ci/conda_env_1.yml
      conda env create --quiet --force --file build/ci/conda_env_2.yml
    displayName: 'Create CONDA Environments'
    condition: and(succeeded(), eq(variables['NeedsPythonFunctionalReqs'], 'true'))

  # Run the pip installs in the 3 environments (darwin linux)
  - bash: |
      source activate base
      conda install --quiet -y --file build/ci/conda_base.yml
      python -m pip install --upgrade -r build/conda-functional-requirements.txt
      source activate conda_env_1
      python -m pip install --upgrade -r build/conda-functional-requirements.txt
      source activate conda_env_2
      python -m pip install --upgrade -r build/conda-functional-requirements.txt
      conda deactivate
    displayName: 'Install Pip requirements for CONDA envs'
    condition: and(succeeded(), eq(variables['NeedsPythonFunctionalReqs'], 'true'), ne(variables['Agent.Os'], 'Windows_NT'))

  # Run the pip installs in the 3 environments (windows)
  - script: |
      call activate base
      call conda install --quiet -y --file build/ci/conda_base.yml
      python -m pip install --upgrade -r build/conda-functional-requirements.txt
      call activate conda_env_1
      python -m pip install --upgrade -r build/conda-functional-requirements.txt
      call activate conda_env_2
      python -m pip install --upgrade -r build/conda-functional-requirements.txt
    displayName: 'Install Pip requirements for CONDA envs'
    condition: and(succeeded(), eq(variables['NeedsPythonFunctionalReqs'], 'true'), eq(variables['Agent.Os'], 'Windows_NT'))

  # Downgrade pywin32 on Windows due to bug https://github.com/jupyter/notebook/issues/4909
  #
  # This task will only run if variable `NeedsPythonFunctionalReqs` is true.
  - bash: |
      python -m pip install --upgrade pywin32==224
    displayName: 'Downgrade pywin32 on Windows / Python 3.6'
    condition: and(succeeded(), eq(variables['NeedsPythonFunctionalReqs'], 'true'), eq(variables['Agent.Os'], 'Windows_NT'), eq(variables['PythonVersion'], '3.6'))

  # Install the requirements for ipython tests.
  #
  # This task will only run if variable `NeedsIPythonReqs` is true.
  #
  # Example command line (windows pwsh):
  # > python -m pip install numpy
  # > python -m pip install --upgrade -r build/ipython-test-requirements.txt
  # > python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
  - bash: |
      python -m pip install numpy
      python -m pip install --upgrade -r ./build/ipython-test-requirements.txt
    displayName: 'pip install ipython requirements'
    condition: and(succeeded(), eq(variables['NeedsIPythonReqs'], 'true'))

  # Install jupyter for smoke tests.
  - bash: |
      python -m pip install --upgrade jupyter
    displayName: 'pip install jupyter'
    condition: and(succeeded(), eq(variables['NeedsIPythonReqs'], 'true'), contains(variables['TestsToRun'], 'testSmoke'))

    # Run the Python IPython tests in our codebase. Produces a JUnit-style log file that
  # will be uploaded after all tests are complete.
  #
  # This task only runs if the string 'pythonIPythonTests' exists in variable `TestsToRun`.
  #
  # Example command line (windows pwsh):
  # > python -m pip install -m -U pip
  # > python -m pip install -U -r build/test-requirements.txt
  # > python pythonFiles/tests/run_all.py --color=yes --junit-xml=python-tests-junit.xml
  - bash: |
      python -m IPython pythonFiles/tests/run_all.py -- --color=no --junit-xml=$COMMON_TESTRESULTSDIRECTORY/ipython-tests-junit.xml
    displayName: 'Python ipython tests'
    condition: and(succeeded(), contains(variables['TestsToRun'], 'pythonIPythonTests'))

  # Upload the test results to Azure DevOps to facilitate test reporting in their UX.
  - task: PublishTestResults@2
    displayName: 'Publish IPython test results'
    condition: contains(variables['TestsToRun'], 'pythonIPythonTests')
    inputs:
      testResultsFiles: 'ipython-tests-junit.xml'
      searchFolder: '$(Common.TestResultsDirectory)'
      testRunTitle: 'pythonIPythonTests-$(Agent.Os)-Py$(pythonVersion)'
      buildPlatform: '$(Agent.Os)-Py$(pythonVersion)'
      buildConfiguration: 'UnitTests'

  # Run the News tool tests.
  #
  # This task only runs if the string 'pythonInternalTools' exists in variable `TestsToRun`
  #
  # Example command line (windows pwsh):
  # > python -m pip install -U -r news/requirements.txt
  - script: |
      python -m pip install --upgrade -r news/requirements.txt
      python -m pytest news --color=yes --junit-xml=$COMMON_TESTRESULTSDIRECTORY/python-news-junit.xml
    displayName: 'Run Python tests for news'
    condition: and(succeeded(), contains(variables['TestsToRun'], 'pythonInternalTools'))

  # Upload the test results to Azure DevOps to facilitate test reporting in their UX.
  - task: PublishTestResults@2
    displayName: 'Publish Python tests for news results'
    condition: contains(variables['TestsToRun'], 'pythonInternalTools')
    inputs:
      testResultsFiles: 'python-news-junit.xml'
      searchFolder: '$(Common.TestResultsDirectory)'
      testRunTitle: 'news-$(Agent.Os)-Py$(pythonVersion)'
      buildPlatform: '$(Agent.Os)-Py$(pythonVersion)'
      buildConfiguration: 'UnitTests'

  # Set the CI_PYTHON_PATH variable that forces VS Code system tests to use
  # the specified Python interpreter.
  #
  # This is how to set an environment variable in the Azure DevOps pipeline, write
  # a specially formatted string to stdout. For details, please see
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#set-in-script
  #
  # Example command line (windows pwsd):
  # > $Env:CI_PYTHON_PATH=(& python -c 'import sys;print(sys.executable)')
  - script: |
      python -c "from __future__ import print_function;import sys;print('##vso[task.setvariable variable=CI_PYTHON_PATH;]{}'.format(sys.executable))"
    displayName: 'Set CI_PYTHON_PATH'

  # Run the functional tests with each file split.
  #
  # This task only runs if the string 'testFunctional' exists in variable `TestsToRun`.
  #
  # Note it is crucial this uses npm to start the runFunctionalTests.js. Otherwise the
  # environment will be messed up.
  #
  # Example command line (windows pwsh):
  # > node build/ci/scripts/runFunctionalTests.js
  - script: |
      npm run test:functional:split
    displayName: 'Run functional split'
    condition: and(succeeded(), contains(variables['TestsToRun'], 'testFunctional'), eq(variables['SplitFunctionalTests'], 'true'))
    env:
      DISPLAY: :10

  # Run the functional tests when not splitting
  #
  # This task only runs if the string 'testFunctional' exists in variable `TestsToRun`.
  #
  # Example command line (windows pwsh):
  # > node build/ci/scripts/runFunctionalTests.js
  - script: |
      npm run test:functional
    displayName: 'Run functional tests'
    condition: and(succeeded(), contains(variables['TestsToRun'], 'testFunctional'), not(eq(variables['SplitFunctionalTests'], 'true')))
    env:
      DISPLAY: :10

  # Upload the test results to Azure DevOps to facilitate test reporting in their UX.
  - task: PublishTestResults@2
    displayName: 'Publish functional tests results'
    condition: contains(variables['TestsToRun'], 'testFunctional')
    inputs:
      testResultsFiles: '$(Build.ArtifactStagingDirectory)/test-junit*.xml'
      testRunTitle: 'functional-$(Agent.Os)-Py$(pythonVersion)'
      buildPlatform: '$(Agent.Os)-Py$(pythonVersion)'
      buildConfiguration: 'FunctionalTests'

  # Run the single workspace tests.
  #
  # This task only runs if the string 'testSingleWorkspace' exists in variable `TestsToRun`.
  #
  # Example command line (windows pwsh):
  # > npm run testSingleWorkspace
  - script: |
      npm run testSingleWorkspace
    displayName: 'Run single workspace tests'
    condition: and(succeeded(), contains(variables['TestsToRun'], 'testSingleWorkspace'))
    env:
      DISPLAY: :10

  # Run the single workspace tests in VS Code Insiders.
  - script: |
      npm run testVSCode
    continueOnError: true
    displayName: 'Run DataScience Tests in VSCode Insiders'
    condition: and(succeeded(), contains(variables['TestsToRun'], 'testVSCode'))
    env:
      DISPLAY: :10
      VSC_JUPYTER_CI_TEST_VSC_CHANNEL: 'insiders'
      VSC_PYTHON_LOAD_EXPERIMENTS_FROM_FILE: 'true'
      TEST_FILES_SUFFIX: 'vscode.test'

  # Upload the test results to Azure DevOps to facilitate test reporting in their UX.
  - task: PublishTestResults@2
    displayName: 'Publish single workspace tests results'
    condition: contains(variables['TestsToRun'], 'testSingleWorkspace')
    inputs:
      testResultsFiles: '$(MOCHA_FILE)'
      testRunTitle: 'singleWorkspace-$(Agent.Os)-Py$(pythonVersion)'
      buildPlatform: '$(Agent.Os)-Py$(pythonVersion)'
      buildConfiguration: 'SystemTests'

  # Run the performance tests.
  #
  # This task only runs if the string 'testPerformance' exists in variable `TestsToRun`.
  #
  # Example command line (windows pwsh):
  # > npm run testPerformance
  - script: |
      npm run testPerformance
    displayName: 'Run Performance Tests'
    condition: and(succeeded(), contains(variables['TestsToRun'], 'testPerformance'))
    env:
      DISPLAY: :10

  # Run the smoke tests.
  #
  # This task only runs if the string 'testSmoke' exists in variable `TestsToRun`.
  #
  # Example command line (windows pwsh):
  # > npm run clean
  # > npm run updateBuildNumber -- --buildNumber 0.0.0-local
  # > npm run package
  # > npx gulp clean:cleanExceptTests
  # > npm run testSmoke
  - bash: |
      npm install -g vsce
      npm run clean
      npx tsc -p ./
      mkdir -p ./tmp/client/logging
      cp -r ./out/client/logging ./tmp/client
      npx gulp clean:cleanExceptTests
      cp -r ./out/test ./tmp/test
      npm run updateBuildNumber -- --buildNumber $BUILD_BUILDID
      npm run package
      npx gulp clean:cleanExceptTests
      mkdir -p ./out/client/logging
      cp -r ./tmp/client/logging ./out/client
      cp -r ./tmp/test ./out/test
      node --no-force-async-hooks-checks ./out/test/smokeTest.js
    displayName: 'Run Smoke Tests'
    condition: and(succeeded(), contains(variables['TestsToRun'], 'testSmoke'))
    env:
      DISPLAY: :10

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: $(Agent.JobName)
    condition: always()
