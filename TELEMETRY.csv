"eventName","eventDescription","eventConstant","owner","feature","tags","groupDescription","propertyName","propertyDescription","propertyType","propertyPossibleValues","propertyIsNullable"
"DATASCIENCE.ADD_CELL_BELOW","Telemetry event sent when user adds a cell below the current cell for IW.","Telemetry.AddCellBelow","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.CLICKED_EXPORT_NOTEBOOK_AS_QUICK_PICK","User exports the IW or Notebook to a specific format.","Telemetry.ClickedExportNotebookAsQuickPick","IanMatthewHuff","","","","format","","","pdf 
html 
python 
ipynb ",false
"DATASCIENCE.DATA_VIEWER_DATA_DIMENSIONALITY","Telemetry event sent when a slice is first applied in a
data viewer instance to a sliceable Python variable.","Telemetry.DataViewerDataDimensionality","IanMatthewHuff","","","","numberOfDimensions","This property represents the number of dimensions
on the target variable being sliced. This should
always be 2 at minimum.","number","",false
"DATASCIENCE.DATA_VIEWER_SLICE_ENABLEMENT_STATE_CHANGED","Telemetry event sent whenever the user toggles the checkbox
controlling whether a slice is currently being applied to an
n-dimensional variable.","Telemetry.DataViewerSliceEnablementStateChanged","IanMatthewHuff","","","","newState","This property is either 'checked' when the result of toggling
the checkbox is for slicing to be enabled, or 'unchecked'
when the result of toggling the checkbox is for slicing
to be disabled.","","checked 
unchecked ",false
"DATASCIENCE.DATA_VIEWER_SLICE_OPERATION","Telemetry event sent whenever the user applies a valid slice
to a sliceable Python variable in the data viewer.","Telemetry.DataViewerSliceOperation","IanMatthewHuff","","","","source","This property indicates whether the slice operation
was triggered using the dropdown or the textbox in
the slice control panel. `source` is one of `dropdown`,
`textbox`, or `checkbox`.","","dropdown 
textbox 
checkbox ",false
"DATASCIENCE.DEBUG_CONTINUE","Telemetry event sent when user hits the `continue` button while debugging IW","Telemetry.DebugContinue","roblourens","Debugger","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.DEBUG_CURRENT_CELL","Telemetry event sent when user debugs the cell in the IW","Telemetry.DebugCurrentCell","roblourens","Debugger","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.DEBUG_FILE_INTERACTIVE","Telemetry event sent when user debugs the file in the IW","Telemetry.DebugFileInteractive","roblourens","Debugger","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.DEBUG_STEP_OVER","Telemetry event sent when user hits the `step over` button while debugging IW","Telemetry.DebugStepOver","roblourens","Debugger","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.DEBUG_STOP","Telemetry event sent when user hits the `stop` button while debugging IW","Telemetry.DebugStop","roblourens","Debugger","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.DEBUGGING.ENDED_SESSION","","DebuggingTelemetry.endedSession","roblourens","","","","reason","","","'normally' 
'onKernelDisposed' 
'onAnInterrupt' 
'onARestart' 
'withKeybinding' ",false
"DATASCIENCE.DEBUGGING.IPYKERNEL6_STATUS","","DebuggingTelemetry.ipykernel6Status","roblourens","","","","status","","","'installed' 
'notInstalled' ",false
"DATASCIENCE.DISABLE_INTERACTIVE_SHIFT_ENTER","Disables using Shift+Enter to run code in IW (this is in response to the prompt recommending users to enable this to use the IW)","Telemetry.DisableInteractiveShiftEnter","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.ENABLE_INTERACTIVE_SHIFT_ENTER","Disables using Shift+Enter to run code in IW (this is in response to the prompt recommending users to enable this to use the IW)","Telemetry.EnableInteractiveShiftEnter","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.ENTER_JUPYTER_URI","Captures the telemetry when the Uri is manually entered by the user as part of the workflow when selecting a Kernel.","Telemetry.EnterJupyterURI","IanMatthewHuff","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","kernelId","Hash of the Kernel Connection id.","string","",false
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","kernelLanguage","Language of the kernel connection.","string","",false
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","restartCount","This number gets reset after change the kernel.","number","",true
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DATASCIENCE.EXECUTE_CELL","Executes a cell, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DATASCIENCE.EXPORT_NOTEBOOK_AS","Called when user imports a Jupyter Notebook into a Python file.
Command is `Jupyter: Import Jupyter Notebook`
Basically user is exporting some jupyter notebook into a Python file or other.","Telemetry.ExportNotebookAs","IanMatthewHuff","","","","format","","","pdf 
html 
python 
ipynb ",false
"DATASCIENCE.EXPORT_NOTEBOOK_AS","Called when user imports a Jupyter Notebook into a Python file.
Command is `Jupyter: Import Jupyter Notebook`
Basically user is exporting some jupyter notebook into a Python file or other.","Telemetry.ExportNotebookAs","IanMatthewHuff","","","","cancelled","","boolean","",true
"DATASCIENCE.EXPORT_NOTEBOOK_AS","Called when user imports a Jupyter Notebook into a Python file.
Command is `Jupyter: Import Jupyter Notebook`
Basically user is exporting some jupyter notebook into a Python file or other.","Telemetry.ExportNotebookAs","IanMatthewHuff","","","","successful","","boolean","",true
"DATASCIENCE.EXPORT_NOTEBOOK_AS","Called when user imports a Jupyter Notebook into a Python file.
Command is `Jupyter: Import Jupyter Notebook`
Basically user is exporting some jupyter notebook into a Python file or other.","Telemetry.ExportNotebookAs","IanMatthewHuff","","","","opened","","boolean","",true
"DATASCIENCE.EXPORT_NOTEBOOK_AS_COMMAND","Called when user exports a Jupyter Notebook or IW into a Python file, HTML, PDF, etc.
Command is `Jupyter: Export to Python Script` or `Jupyter: Export to HTML`
Basically user is exporting some jupyter notebook or IW into a Python file or other.","Telemetry.ExportNotebookAsCommand","IanMatthewHuff","","","","format","","","pdf 
html 
python 
ipynb ",false
"DATASCIENCE.EXPORT_NOTEBOOK_AS_FAILED","Export fails","Telemetry.ExportNotebookAsFailed","IanMatthewHuff","","","","format","","","pdf 
html 
python 
ipynb ",false
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","","","","kind","What kind of kernel spec did we fail to create.","","'startUsingPythonInterpreter' 
'startUsingDefaultKernel' 
'startUsingLocalKernelSpec' 
'startUsingRemoteKernelSpec' 
'connectToLiveRemoteKernel' ",false
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","","","","failed","Whether there was a failure.","true","",false
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","","","","stackTrace","Node stacktrace without PII.","string","",false
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","","","","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.","string","",true
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","","","","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.","string","",true
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","","","","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).","string","",true
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","","","","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).","string","",true
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","","","","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).","string","",true
"DATASCIENCE.FETCH_CONTROLLERS","Telemetry sent when we have loaded some controllers.","Telemetry.FetchControllers","IanMatthewHuff","","","","cached","Whether this is from a cached result or not","boolean","",false
"DATASCIENCE.FETCH_CONTROLLERS","Telemetry sent when we have loaded some controllers.","Telemetry.FetchControllers","IanMatthewHuff","","","","kind","Whether we've loaded local or remote controllers.","","'local' 
'remote' ",false
"DATASCIENCE.GET_PASSWORD_ATTEMPT","","Telemetry.GetPasswordAttempt","donjayamanne","N/A","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DATASCIENCE.GOTO_NEXT_CELL_IN_FILE","","Telemetry.GotoNextCellInFile","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.GOTO_PREV_CELL_IN_FILE","","Telemetry.GotoPrevCellInFile","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.IMPORT_NOTEBOOK","Called when user imports a Jupyter Notebook into a Python file.
Command is `Jupyter: Import Jupyter Notebook`
Basically user is exporting some jupyter notebook into a Python file.","Telemetry.ImportNotebook","IanMatthewHuff","","","","scope","","","'command' 
'file' ",false
"DATASCIENCE.INTERACTIVE_WINDOW_DEBUG_SETUP_CODE_FAILURE","","Telemetry.InteractiveWindowDebugSetupCodeFailure","amunger","","","","ename","","string","",false
"DATASCIENCE.INTERACTIVE_WINDOW_DEBUG_SETUP_CODE_FAILURE","","Telemetry.InteractiveWindowDebugSetupCodeFailure","amunger","","","","evalue","","string","",false
"DATASCIENCE.INTERRUPT","User interrupts a cell
Identical to `Telemetry.InterruptJupyterTime`","Telemetry.Interrupt","donjayamanne","InteractiveWindow, Notebook","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DATASCIENCE.JUPYTER_KERNEL_API_ACCESS","","Telemetry.JupyterKernelApiAccess","donjayamanne","N/A","","","extensionId","","string","",false
"DATASCIENCE.JUPYTER_KERNEL_API_ACCESS","","Telemetry.JupyterKernelApiAccess","donjayamanne","N/A","","","allowed","","","'yes' 
'no' ",false
"DATASCIENCE.JUPYTER_KERNEL_API_USAGE","","Telemetry.JupyterKernelApiUsage","donjayamanne","N/A","","","extensionId","","string","",false
"DATASCIENCE.JUPYTER_KERNEL_API_USAGE","","Telemetry.JupyterKernelApiUsage","donjayamanne","N/A","","","pemUsed","","keyof IExportedKernelService","",false
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","kernelId","Hash of the Kernel Connection id.","string","",false
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","kernelLanguage","Language of the kernel connection.","string","",false
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","restartCount","This number gets reset after change the kernel.","number","",true
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DATASCIENCE.KERNEL_CRASH","","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DATASCIENCE.KERNEL_SPEC_LANGUAGE","","Telemetry.KernelSpecLanguage","donjayamanne","N/A","KernelStartup","","language","Language of the kernelSpec.","string","",false
"DATASCIENCE.KERNEL_SPEC_LANGUAGE","","Telemetry.KernelSpecLanguage","donjayamanne","N/A","KernelStartup","","kind","Whether this is a local or remote kernel.","","'local' 
'remote' ",false
"DATASCIENCE.KERNEL_SPEC_LANGUAGE","","Telemetry.KernelSpecLanguage","donjayamanne","N/A","KernelStartup","","usesShell","Whether shell is used to start the kernel. E.g. `""/bin/sh""` is used in the argv of the kernelSpec.
OCaml is one such kernel.","boolean","",true
"DATASCIENCE.KERNEL_STARTUP_CODE_FAILURE","","Telemetry.KernelStartupCodeFailure","donjayamanne","Notebook, InteractiveWindow","","","ename","","string","",false
"DATASCIENCE.KERNEL_STARTUP_CODE_FAILURE","","Telemetry.KernelStartupCodeFailure","donjayamanne","Notebook, InteractiveWindow","","","evalue","","string","",false
"DATASCIENCE.NATIVE.CREATE_NEW_NOTEBOOK","","Telemetry.CreateNewNotebook","unknown","N/A","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","result","The result of the interrupt,","","success 
timeout 
restart ",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","kernelId","Hash of the Kernel Connection id.","string","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","pythonEnvironmentCount","Total number of python environments.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","kernelLanguage","Language of the kernel connection.","string","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","restartCount","This number gets reset after change the kernel.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","startFailureCount","Number of times starting the kernel failed.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","switchKernelCount","Number of times the kernel was changed.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","kernelId","Hash of the Kernel Connection id.","string","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonEnvironmentCount","Total number of python environments.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","kernelLanguage","Language of the kernel connection.","string","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","restartCount","This number gets reset after change the kernel.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","startFailureCount","Number of times starting the kernel failed.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","switchKernelCount","Number of times the kernel was changed.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","failed","Whether there was a failure.","true","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","stackTrace","Node stacktrace without PII.","string","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Name of the method in the extension that threw the exception. Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Total time taken to interrupt a kernel
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).","string","",true
"DATASCIENCE.NOTEBOOK_LANGUAGE","Telemetry event sent to indicate the language used in a notebook","Telemetry.NotebookLanguage","donjayamanne","N/A","","","language","Language found in the notebook if a known language. Otherwise 'unknown'","string","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","startTimeOnly","If true, this is the total time taken to restart the kernel (excluding times to stop current cells and the like).
Also in the case of raw kernels, we keep a separate process running, and when restarting we just switch to that process.
In such cases this value will be `undefined`. In the case of raw kernels this will be true only when starting a new kernel process from scratch.","true","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","kernelId","Hash of the Kernel Connection id.","string","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","pythonEnvironmentCount","Total number of python environments.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","kernelLanguage","Language of the kernel connection.","string","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","restartCount","This number gets reset after change the kernel.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","startFailureCount","Number of times starting the kernel failed.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","switchKernelCount","Number of times the kernel was changed.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelId","Hash of the Kernel Connection id.","string","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonEnvironmentCount","Total number of python environments.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelLanguage","Language of the kernel connection.","string","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","restartCount","This number gets reset after change the kernel.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","startFailureCount","Number of times starting the kernel failed.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","switchKernelCount","Number of times the kernel was changed.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","failed","Whether there was a failure.","true","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","stackTrace","Node stacktrace without PII.","string","",false
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Name of the method in the extension that threw the exception. Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).","string","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelId","Hash of the Kernel Connection id.","string","",false
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelLanguage","Language of the kernel connection.","string","",false
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","restartCount","This number gets reset after change the kernel.","number","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","failed","Whether there was a failure.","true","",false
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","stackTrace","Node stacktrace without PII.","string","",false
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.","string","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Name of the method in the extension that threw the exception. Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.","string","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).","string","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).","string","",true
"DATASCIENCE.NOTEBOOK_START","Starts a kernel, applies to IW and Notebook.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.
If `failed` is false, then its a success, else startup failed.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).","string","",true
"DATASCIENCE.PYTHON_VARIABLE_FETCHING_CODE_FAILURE","","Telemetry.PythonVariableFetchingCodeFailure","IanMatthewHuff","","","","ename","","string","",false
"DATASCIENCE.PYTHON_VARIABLE_FETCHING_CODE_FAILURE","","Telemetry.PythonVariableFetchingCodeFailure","IanMatthewHuff","","","","evalue","","string","",false
"DATASCIENCE.RECOMMENT_EXTENSION","","Telemetry.RecommendExtension","IanMatthewHuff","","","","extensionId","Extension we recommended the user to install.","string","",false
"DATASCIENCE.RECOMMENT_EXTENSION","","Telemetry.RecommendExtension","IanMatthewHuff","","","","action","`displayed` - If prompt was displayed
`dismissed` - If prompt was displayed & dismissed by the user
`ok` - If prompt was displayed & ok clicked by the user
`cancel` - If prompt was displayed & cancel clicked by the user
`doNotShowAgain` - If prompt was displayed & doNotShowAgain clicked by the user","","'displayed' 
'dismissed' 
'ok' 
'cancel' 
'doNotShowAgain' ",false
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","kernelId","Hash of the Kernel Connection id.","string","",false
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","kernelLanguage","Language of the kernel connection.","string","",false
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","restartCount","This number gets reset after change the kernel.","number","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted.","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DATASCIENCE.RUN_ALL_CELLS","Run all Cell Commands in Interactive Python","Telemetry.RunAllCells","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_ALL_CELLS_ABOVE","Run all the above cells in Interactive Python","Telemetry.RunAllCellsAbove","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_CELL_AND_ALL_BELOW","Run current cell and all below in Interactive Python","Telemetry.RunCellAndAllBelow","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_CHANGE_CELL_TO_CODE","","Telemetry.ChangeCellToCode","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_CHANGE_CELL_TO_MARKDOWN","","Telemetry.ChangeCellToMarkdown","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_CURRENT_CELL","Run the current Cell in Interactive Python","Telemetry.RunCurrentCell","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_CURRENT_CELL_AND_ADD_BELOW","","Telemetry.RunCurrentCellAndAddBelow","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_CURRENT_CELL_AND_ADVANCE","Run current cell and advance cursor in Interactive Python","Telemetry.RunCurrentCellAndAdvance","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_DELETE_CELLS","","Telemetry.DeleteCells","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_EXTEND_SELECTION_BY_CELL_ABOVE","","Telemetry.ExtendSelectionByCellAbove","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_EXTEND_SELECTION_BY_CELL_BELOW","","Telemetry.ExtendSelectionByCellBelow","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_FILE_INTERACTIVE","Run file in Interactive Python","Telemetry.RunFileInteractive","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_FROM_LINE","","Telemetry.RunFromLine","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_INSERT_CELL_ABOVE","","Telemetry.InsertCellAbove","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_INSERT_CELL_BELOW","","Telemetry.InsertCellBelow","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_INSERT_CELL_BELOW_POSITION","Cell Edit Commands in Interactive Python","Telemetry.InsertCellBelowPosition","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_MOVE_CELLS_DOWN","","Telemetry.MoveCellsDown","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_MOVE_CELLS_UP","","Telemetry.MoveCellsUp","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_SELECT_CELL","","Telemetry.SelectCell","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_SELECT_CELL_CONTENTS","","Telemetry.SelectCellContents","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_SELECTION_OR_LINE","Run a Selection or Line in Interactive Python","Telemetry.RunSelectionOrLine","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_TO_LINE","","Telemetry.RunToLine","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.SELECT_JUPYTER_URI","","Telemetry.SelectJupyterURI","IanMatthewHuff","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","kernelId","Hash of the Kernel Connection id.","string","",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","kernelLanguage","Language of the kernel connection.","string","",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","restartCount","This number gets reset after change the kernel.","number","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","N/A","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","kernelId","Hash of the Kernel Connection id.","string","",false
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","kernelLanguage","Language of the kernel connection.","string","",false
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","restartCount","This number gets reset after change the kernel.","number","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","N/A","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DATASCIENCE.SET_JUPYTER_URI_LOCAL","","Telemetry.SetJupyterURIToLocal","IanMatthewHuff","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.SET_JUPYTER_URI_UI_DISPLAYED","This telemetry tracks the display of the Picker for Jupyter Remote servers.","Telemetry.SetJupyterURIUIDisplayed","IanMatthewHuff","","","","commandSource","This telemetry tracks the source of this UI.
nonUser - Invoked internally by our code.
toolbar - Invoked by user from Native or Interactive window toolbar.
commandPalette - Invoked from command palette by the user.
nativeNotebookStatusBar - Invoked from Native notebook statusbar.
nativeNotebookToolbar - Invoked from Native notebook toolbar.","","nonUser 
toolbar 
commandPalette 
nativeNotebookStatusBar 
nativeNotebookToolbar 
errorHandler 
prompt ",false
"DATASCIENCE.SET_JUPYTER_URI_USER_SPECIFIED","","Telemetry.SetJupyterURIToUserSpecified","IanMatthewHuff","","","","azure","","boolean","",false
"DATASCIENCE.SHOW_DATA_EXPLORER","","Telemetry.ShowDataViewer","IanMatthewHuff","","","","rows","","","null or <empty> ",false
"DATASCIENCE.SHOW_DATA_EXPLORER","","Telemetry.ShowDataViewer","IanMatthewHuff","","","","columns","","","null or <empty> ",false
"DATASCIENCE.START_SHOW_DATA_EXPLORER","","Telemetry.StartShowDataViewer","IanMatthewHuff","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.USER_STARTUP_CODE_FAILURE","","Telemetry.UserStartupCodeFailure","donjayamanne","Notebook, InteractiveWindow","","","ename","","string","",false
"DATASCIENCE.USER_STARTUP_CODE_FAILURE","","Telemetry.UserStartupCodeFailure","donjayamanne","Notebook, InteractiveWindow","","","evalue","","string","",false
"DS_INTERNAL.ACTIVE_INTERPRETER_LISTING_PERF","","Telemetry.ActiveInterpreterListingPerf","donjayamanne","N/A","","","firstTime","Whether this is the first time in the session.
(fetching kernels first time in the session is slower, later its cached).
This is a generic property supported for all telemetry (sent by decorators).","boolean","",true
"DS_INTERNAL.ACTIVE_INTERPRETER_LISTING_PERF","","Telemetry.ActiveInterpreterListingPerf","donjayamanne","N/A","","","duration","Total time taken to list interpreters.","number","",false
"DS_INTERNAL.CODE_LENS_ACQ_TIME","","Telemetry.CodeLensAverageAcquisitionTime","amunger","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.COMMAND_EXECUTED","Telemetry sent when a command is executed.","Telemetry.CommandExecuted","unknown","N/A","","","command","Name of the command executed.","string","",false
"DS_INTERNAL.CONNECTFAILEDJUPYTER","","Telemetry.ConnectFailedJupyter","donjayamanne","N/A","KernelStartup","","failed","Whether there was a failure.","true","",false
"DS_INTERNAL.CONNECTFAILEDJUPYTER","","Telemetry.ConnectFailedJupyter","donjayamanne","N/A","KernelStartup","","stackTrace","Node stacktrace without PII.","string","",false
"DS_INTERNAL.CONNECTFAILEDJUPYTER","","Telemetry.ConnectFailedJupyter","donjayamanne","N/A","KernelStartup","","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.","string","",true
"DS_INTERNAL.CONNECTFAILEDJUPYTER","","Telemetry.ConnectFailedJupyter","donjayamanne","N/A","KernelStartup","","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Name of the method in the extension that threw the exception. Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.","string","",true
"DS_INTERNAL.CONNECTFAILEDJUPYTER","","Telemetry.ConnectFailedJupyter","donjayamanne","N/A","KernelStartup","","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.CONNECTFAILEDJUPYTER","","Telemetry.ConnectFailedJupyter","donjayamanne","N/A","KernelStartup","","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.CONNECTFAILEDJUPYTER","","Telemetry.ConnectFailedJupyter","donjayamanne","N/A","KernelStartup","","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.CONNECTREMOTEFAILEDJUPYTER","","Telemetry.ConnectRemoteFailedJupyter","donjayamanne","N/A","KernelStartup","","failed","Whether there was a failure.","true","",false
"DS_INTERNAL.CONNECTREMOTEFAILEDJUPYTER","","Telemetry.ConnectRemoteFailedJupyter","donjayamanne","N/A","KernelStartup","","stackTrace","Node stacktrace without PII.","string","",false
"DS_INTERNAL.CONNECTREMOTEFAILEDJUPYTER","","Telemetry.ConnectRemoteFailedJupyter","donjayamanne","N/A","KernelStartup","","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.","string","",true
"DS_INTERNAL.CONNECTREMOTEFAILEDJUPYTER","","Telemetry.ConnectRemoteFailedJupyter","donjayamanne","N/A","KernelStartup","","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Name of the method in the extension that threw the exception. Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.","string","",true
"DS_INTERNAL.CONNECTREMOTEFAILEDJUPYTER","","Telemetry.ConnectRemoteFailedJupyter","donjayamanne","N/A","KernelStartup","","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.CONNECTREMOTEFAILEDJUPYTER","","Telemetry.ConnectRemoteFailedJupyter","donjayamanne","N/A","KernelStartup","","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.CONNECTREMOTEFAILEDJUPYTER","","Telemetry.ConnectRemoteFailedJupyter","donjayamanne","N/A","KernelStartup","","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","pythonExtensionInstalled","Indicates whether the python extension is installed.
If we send telemetry fro this & this is `true`, then we have a bug.
If its `false`, then we can ignore this telemetry.","boolean","",false
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.ERROR_START_RAWKERNEL_WITHOUT_INTERPRETER","","Telemetry.AttemptedToLaunchRawKernelWithoutInterpreter","donjayamanne","N/A","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.EXECUTE_CELL_PERCEIVED_COLD","Telemetry sent to capture first time execution of a cell.
If `notebook = true`, this its telemetry for Jupyter notebooks, else applies to IW.","Telemetry.ExecuteCellPerceivedCold","donjayamanne","InteractiveWindow, Notebook","Cell Execution","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.EXECUTE_CELL_PERCEIVED_COLD","Telemetry sent to capture first time execution of a cell.
If `notebook = true`, this its telemetry for Jupyter notebooks, else applies to IW.","Telemetry.ExecuteCellPerceivedCold","donjayamanne","InteractiveWindow, Notebook","Cell Execution","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.EXECUTE_CELL_PERCEIVED_WARM","Telemetry sent to capture subsequent execution of a cell.
If `notebook = true`, this its telemetry for native editor/notebooks.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.ExecuteCellPerceivedWarm","donjayamanne","InteractiveWindow, Notebook","Cell Execution","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.EXECUTE_CELL_PERCEIVED_WARM","Telemetry sent to capture subsequent execution of a cell.
If `notebook = true`, this its telemetry for native editor/notebooks.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.ExecuteCellPerceivedWarm","donjayamanne","InteractiveWindow, Notebook","Cell Execution","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.GET_ACTIVATED_ENV_VARIABLES","Used to capture time taken to get environment variables for a python environment.
Also lets us know whether it worked or not.","Telemetry.GetActivatedEnvironmentVariables","donjayamanne","N/A","","","envType","Type of the Python environment.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.GET_ACTIVATED_ENV_VARIABLES","Used to capture time taken to get environment variables for a python environment.
Also lets us know whether it worked or not.","Telemetry.GetActivatedEnvironmentVariables","donjayamanne","N/A","","","pythonEnvType","Duplicate of `envType`, the property `envType` doesn't seem to be coming through.
If we can get `envType`, then we'll deprecate this new property.
Else we just deprecate & remote the old property.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.GET_ACTIVATED_ENV_VARIABLES","Used to capture time taken to get environment variables for a python environment.
Also lets us know whether it worked or not.","Telemetry.GetActivatedEnvironmentVariables","donjayamanne","N/A","","","failed","Whether the env variables were fetched successfully or not.","boolean","",false
"DS_INTERNAL.GET_ACTIVATED_ENV_VARIABLES","Used to capture time taken to get environment variables for a python environment.
Also lets us know whether it worked or not.","Telemetry.GetActivatedEnvironmentVariables","donjayamanne","N/A","","","source","Source where the env variables were fetched from.
If `python`, then env variables were fetched from Python extension.
If `jupyter`, then env variables were fetched from Jupyter extension.","","'python' 
'jupyter' ",false
"DS_INTERNAL.GET_ACTIVATED_ENV_VARIABLES","Used to capture time taken to get environment variables for a python environment.
Also lets us know whether it worked or not.","Telemetry.GetActivatedEnvironmentVariables","donjayamanne","N/A","","","reason","Reason for not being able to get the env variables.","","'noActivationCommands' 
'unknownOS' 
'emptyVariables' 
'unhandledError' 
'emptyFromCondaRun' 
'emptyFromPython' 
'failedToGetActivatedEnvVariablesFromPython' 
'failedToGetCustomEnvVariables' ",true
"DS_INTERNAL.GET_ACTIVATED_ENV_VARIABLES","Used to capture time taken to get environment variables for a python environment.
Also lets us know whether it worked or not.","Telemetry.GetActivatedEnvironmentVariables","donjayamanne","N/A","","","duration","Time taken.
Total time taken to list interpreters. Total time taken to list kernels.","number","",false
"DS_INTERNAL.HASHED_OUTPUT_MIME_TYPE","Hash of the mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.HashedCellOutputMimeType","donjayamanne","N/A","","","hashedName","Hash of the cell output mimetype","string","",false
"DS_INTERNAL.HASHED_OUTPUT_MIME_TYPE","Hash of the mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.HashedCellOutputMimeType","donjayamanne","N/A","","","hasText","Whether the mime type has the word 'text' in it.","boolean","",false
"DS_INTERNAL.HASHED_OUTPUT_MIME_TYPE","Hash of the mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.HashedCellOutputMimeType","donjayamanne","N/A","","","hasLatex","Whether the mime type has the word 'latex' in it.","boolean","",false
"DS_INTERNAL.HASHED_OUTPUT_MIME_TYPE","Hash of the mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.HashedCellOutputMimeType","donjayamanne","N/A","","","hasHtml","Whether the mime type has the word 'html' in it.","boolean","",false
"DS_INTERNAL.HASHED_OUTPUT_MIME_TYPE","Hash of the mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.HashedCellOutputMimeType","donjayamanne","N/A","","","hasSvg","Whether the mime type has the word 'svg' in it.","boolean","",false
"DS_INTERNAL.HASHED_OUTPUT_MIME_TYPE","Hash of the mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.HashedCellOutputMimeType","donjayamanne","N/A","","","hasXml","Whether the mime type has the word 'xml' in it.","boolean","",false
"DS_INTERNAL.HASHED_OUTPUT_MIME_TYPE","Hash of the mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.HashedCellOutputMimeType","donjayamanne","N/A","","","hasJson","Whether the mime type has the word 'json' in it.","boolean","",false
"DS_INTERNAL.HASHED_OUTPUT_MIME_TYPE","Hash of the mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.HashedCellOutputMimeType","donjayamanne","N/A","","","hasImage","Whether the mime type has the word 'image' in it.","boolean","",false
"DS_INTERNAL.HASHED_OUTPUT_MIME_TYPE","Hash of the mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.HashedCellOutputMimeType","donjayamanne","N/A","","","hasGeo","Whether the mime type has the word 'geo' in it.","boolean","",false
"DS_INTERNAL.HASHED_OUTPUT_MIME_TYPE","Hash of the mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.HashedCellOutputMimeType","donjayamanne","N/A","","","hasPlotly","Whether the mime type has the word 'plotly' in it.","boolean","",false
"DS_INTERNAL.HASHED_OUTPUT_MIME_TYPE","Hash of the mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.HashedCellOutputMimeType","donjayamanne","N/A","","","hasVega","Whether the mime type has the word 'vega' in it.","boolean","",false
"DS_INTERNAL.HASHED_OUTPUT_MIME_TYPE","Hash of the mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.HashedCellOutputMimeType","donjayamanne","N/A","","","hasWidget","Whether the mime type has the word 'widget' in it.","boolean","",false
"DS_INTERNAL.HASHED_OUTPUT_MIME_TYPE","Hash of the mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.HashedCellOutputMimeType","donjayamanne","N/A","","","hasJupyter","Whether the mime type has the word 'jupyter' in it.","boolean","",false
"DS_INTERNAL.HASHED_OUTPUT_MIME_TYPE","Hash of the mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.HashedCellOutputMimeType","donjayamanne","N/A","","","hasVnd","Whether the mime type has the word 'vnd' in it.","boolean","",false
"DS_INTERNAL.INTERACTIVE_FILE_TOOLTIPS_PERF","","Telemetry.InteractiveFileTooltipsPerf","IanMatthewHuff","","","","isResultNull","","boolean","",false
"DS_INTERNAL.INTERPRETER_LISTING_PERF","Time taken to list the Python interpreters.","Telemetry.InterpreterListingPerf","donjayamanne","N/A","","","firstTime","Whether this is the first time in the session.
(fetching kernels first time in the session is slower, later its cached).
This is a generic property supported for all telemetry (sent by decorators).","boolean","",true
"DS_INTERNAL.INTERPRETER_LISTING_PERF","Time taken to list the Python interpreters.","Telemetry.InterpreterListingPerf","donjayamanne","N/A","","","duration","Total time taken to list interpreters.","number","",false
"DS_INTERNAL.INTERRUPT_JUPYTER_TIME","User interrupts a cell
Identical to `Telemetry.Interrupt`","Telemetry.InterruptJupyterTime","donjayamanne","InteractiveWindow, Notebook","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.IPYWIDGET_DISCOVER_WIDGETS_NB_EXTENSIONS","Total time taken to discover all IPyWidgets.
This is how long it takes to discover all widgets on disc (from python environment).","Telemetry.DiscoverIPyWidgetNamesPerf","donjayamanne","Notebook, InteractiveWindow","Widgets","","type","Whether we're looking for widgets on local Jupyter environment (local connections) or remote.","","'local' 
'remote' ",false
"DS_INTERNAL.IPYWIDGET_DISCOVERED","Telemetry event sent with name of a Widget found.","Telemetry.HashedIPyWidgetNameDiscovered","donjayamanne","Notebook, InteractiveWindow","Widgets","","hashedName","Hash of the widget","string","",false
"DS_INTERNAL.IPYWIDGET_DISCOVERED","Telemetry event sent with name of a Widget found.","Telemetry.HashedIPyWidgetNameDiscovered","donjayamanne","Notebook, InteractiveWindow","Widgets","","source","Where did we find the hashed name (CDN or user environment or remote jupyter).","","'cdn' 
'local' 
'remote' ",true
"DS_INTERNAL.IPYWIDGET_EXTENSIONJS_INFO","Telemetry event sent once we've successfully or unsuccessfully parsed the extension.js file in the widget folder.
E.g. if we have a widget named ipyvolume, we attempt to parse the nbextensions/ipyvolume/extension.js file to get some info out of it.","Telemetry.IPyWidgetExtensionJsInfo","donjayamanne","Notebook, Notebook","Widgets","Successfully parsed extension.js","widgetFolderNameHash","Hash of the widget folder name.","string","",false
"DS_INTERNAL.IPYWIDGET_EXTENSIONJS_INFO","Telemetry event sent once we've successfully or unsuccessfully parsed the extension.js file in the widget folder.
E.g. if we have a widget named ipyvolume, we attempt to parse the nbextensions/ipyvolume/extension.js file to get some info out of it.","Telemetry.IPyWidgetExtensionJsInfo","donjayamanne","Notebook, Notebook","Widgets","Successfully parsed extension.js","requireEntryPointCount","Total number of entries in the require config.","number","",false
"DS_INTERNAL.IPYWIDGET_EXTENSIONJS_INFO","Telemetry event sent once we've successfully or unsuccessfully parsed the extension.js file in the widget folder.
E.g. if we have a widget named ipyvolume, we attempt to parse the nbextensions/ipyvolume/extension.js file to get some info out of it.","Telemetry.IPyWidgetExtensionJsInfo","donjayamanne","Notebook, Notebook","Widgets","Successfully parsed extension.js","patternUsedToRegisterRequireConfig","Pattern (code style) used to register require.config enties.","string","",false
"DS_INTERNAL.IPYWIDGET_EXTENSIONJS_INFO","Telemetry event sent once we've successfully or unsuccessfully parsed the extension.js file in the widget folder.
E.g. if we have a widget named ipyvolume, we attempt to parse the nbextensions/ipyvolume/extension.js file to get some info out of it.","Telemetry.IPyWidgetExtensionJsInfo","donjayamanne","Notebook, Notebook","Widgets","Failed to parse extension.js. ","widgetFolderNameHash","Hash of the widget folder name.","string","",false
"DS_INTERNAL.IPYWIDGET_EXTENSIONJS_INFO","Telemetry event sent once we've successfully or unsuccessfully parsed the extension.js file in the widget folder.
E.g. if we have a widget named ipyvolume, we attempt to parse the nbextensions/ipyvolume/extension.js file to get some info out of it.","Telemetry.IPyWidgetExtensionJsInfo","donjayamanne","Notebook, Notebook","Widgets","Failed to parse extension.js. ","failed","","true","",false
"DS_INTERNAL.IPYWIDGET_EXTENSIONJS_INFO","Telemetry event sent once we've successfully or unsuccessfully parsed the extension.js file in the widget folder.
E.g. if we have a widget named ipyvolume, we attempt to parse the nbextensions/ipyvolume/extension.js file to get some info out of it.","Telemetry.IPyWidgetExtensionJsInfo","donjayamanne","Notebook, Notebook","Widgets","Failed to parse extension.js. ","failure","","","'couldNotLocateRequireConfigStart' 
'couldNotLocateRequireConfigEnd' 
'noRequireConfigEntries' ",false
"DS_INTERNAL.IPYWIDGET_EXTENSIONJS_INFO","Telemetry event sent once we've successfully or unsuccessfully parsed the extension.js file in the widget folder.
E.g. if we have a widget named ipyvolume, we attempt to parse the nbextensions/ipyvolume/extension.js file to get some info out of it.","Telemetry.IPyWidgetExtensionJsInfo","donjayamanne","Notebook, Notebook","Widgets","Failed to parse extension.js. ","patternUsedToRegisterRequireConfig","Pattern (code style) used to register require.config enties.","","null or <empty> ",false
"DS_INTERNAL.IPYWIDGET_LOAD_FAILURE","Telemetry event sent when an ipywidget module fails to load. Module name is hashed.","Telemetry.IPyWidgetLoadFailure","donjayamanne","Notebook, InteractiveWindow","Widgets","","isOnline","","boolean","",false
"DS_INTERNAL.IPYWIDGET_LOAD_FAILURE","Telemetry event sent when an ipywidget module fails to load. Module name is hashed.","Telemetry.IPyWidgetLoadFailure","donjayamanne","Notebook, InteractiveWindow","Widgets","","moduleHash","","string","",false
"DS_INTERNAL.IPYWIDGET_LOAD_FAILURE","Telemetry event sent when an ipywidget module fails to load. Module name is hashed.","Telemetry.IPyWidgetLoadFailure","donjayamanne","Notebook, InteractiveWindow","Widgets","","moduleVersion","","string","",false
"DS_INTERNAL.IPYWIDGET_LOAD_FAILURE","Telemetry event sent when an ipywidget module fails to load. Module name is hashed.","Telemetry.IPyWidgetLoadFailure","donjayamanne","Notebook, InteractiveWindow","Widgets","","timedout","","boolean","",false
"DS_INTERNAL.IPYWIDGET_LOAD_SUCCESS","Telemetry event sent when an ipywidget module loads. Module name is hashed.","Telemetry.IPyWidgetLoadSuccess","donjayamanne","Notebook, InteractiveWindow","Widgets","","moduleHash","","string","",false
"DS_INTERNAL.IPYWIDGET_LOAD_SUCCESS","Telemetry event sent when an ipywidget module loads. Module name is hashed.","Telemetry.IPyWidgetLoadSuccess","donjayamanne","Notebook, InteractiveWindow","Widgets","","moduleVersion","","string","",false
"DS_INTERNAL.IPYWIDGET_OVERHEAD","Telemetry event sent to indicate the overhead of syncing the kernel with the UI.","Telemetry.IPyWidgetOverhead","donjayamanne","Notebook, InteractiveWindow","Widgets","","totalOverheadInMs","","number","",false
"DS_INTERNAL.IPYWIDGET_OVERHEAD","Telemetry event sent to indicate the overhead of syncing the kernel with the UI.","Telemetry.IPyWidgetOverhead","donjayamanne","Notebook, InteractiveWindow","Widgets","","numberOfMessagesWaitedOn","","number","",false
"DS_INTERNAL.IPYWIDGET_OVERHEAD","Telemetry event sent to indicate the overhead of syncing the kernel with the UI.","Telemetry.IPyWidgetOverhead","donjayamanne","Notebook, InteractiveWindow","Widgets","","averageWaitTime","","number","",false
"DS_INTERNAL.IPYWIDGET_OVERHEAD","Telemetry event sent to indicate the overhead of syncing the kernel with the UI.","Telemetry.IPyWidgetOverhead","donjayamanne","Notebook, InteractiveWindow","Widgets","","numberOfRegisteredHooks","","number","",false
"DS_INTERNAL.IPYWIDGET_PROMPT_TO_USE_CDN_SELECTION","Telemetry sent when user does something with the prompt displayed to user about using CDN for IPyWidget scripts.","Telemetry.IPyWidgetPromptToUseCDNSelection","donjayamanne","Notebook, InteractiveWindow","Widgets","","selection","","","'ok' 
'cancel' 
'dismissed' 
'doNotShowAgain' ",false
"DS_INTERNAL.IPYWIDGET_TIME_TO_COPY_NBEXTENSIONS_DIR","Total time take to copy the nb extensions folder.","Telemetry.IPyWidgetNbExtensionCopyTime","donjayamanne","Notebook, Notebook","Widgets","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.IPYWIDGET_UNHANDLED_MESSAGE","Telemetry event sent when the widget tries to send a kernel message but nothing was listening","Telemetry.IPyWidgetUnhandledMessage","donjayamanne","Notebook, InteractiveWindow","Widgets","","msg_type","","string","",false
"DS_INTERNAL.IPYWIDGET_USED_BY_USER","Telemetry event sent with name of a Widget that is used.","Telemetry.HashedIPyWidgetNameUsed","donjayamanne","Notebook, InteractiveWindow","Widgets","","hashedName","Hash of the widget","string","",false
"DS_INTERNAL.IPYWIDGET_USED_BY_USER","Telemetry event sent with name of a Widget that is used.","Telemetry.HashedIPyWidgetNameUsed","donjayamanne","Notebook, InteractiveWindow","Widgets","","source","Where did we find the hashed name (CDN or user environment or remote jupyter).","","'cdn' 
'local' 
'remote' ",true
"DS_INTERNAL.IPYWIDGET_USED_BY_USER","Telemetry event sent with name of a Widget that is used.","Telemetry.HashedIPyWidgetNameUsed","donjayamanne","Notebook, InteractiveWindow","Widgets","","cdnSearched","Whether we searched CDN or not.","boolean","",false
"DS_INTERNAL.IPYWIDGET_WIDGET_VERSION_NOT_SUPPORTED_LOAD_FAILURE","Telemetry event sent when an ipywidget version that is not supported is used & we have trapped this and warned the user abou it.","Telemetry.IPyWidgetWidgetVersionNotSupportedLoadFailure","donjayamanne","Notebook, InteractiveWindow","Widgets","","moduleHash","","string","",false
"DS_INTERNAL.IPYWIDGET_WIDGET_VERSION_NOT_SUPPORTED_LOAD_FAILURE","Telemetry event sent when an ipywidget version that is not supported is used & we have trapped this and warned the user abou it.","Telemetry.IPyWidgetWidgetVersionNotSupportedLoadFailure","donjayamanne","Notebook, InteractiveWindow","Widgets","","moduleVersion","","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","failed","Whether there was a failure.","true","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","stackTrace","Node stacktrace without PII.","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Name of the method in the extension that threw the exception. Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.JUPYTER_REGISTER_INTERPRETER_AS_KERNEL","","Telemetry.RegisterInterpreterAsKernel","donjayamanne","N/A","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.JUPYTERSTARTUPCOST","","Telemetry.StartJupyter","donjayamanne","N/A","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","kernelSpecCount","Total number of kernel specs in the kernel list.","number","",false
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","kernelInterpreterCount","Total number of interpreters in the kernel list.","number","",false
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","kernelLiveCount","Total number of live kernels in the kernel list.","number","",false
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","condaEnvsSharingSameInterpreter","Total number of conda environments that share the same interpreter
This happens when we create conda envs without the `python` argument.
Such conda envs don't work today in the extension.
Hence users with such environments could hvae issues with starting kernels or packages not getting loaded correctly or at all.","number","",false
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Total number of kernel specs in the kernel list.","number","",false
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Total number of interpreters in the kernel list.","number","",false
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Total number of live kernels in the kernel list.","number","",false
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.KERNEL_COUNT","","Telemetry.KernelCount","donjayamanne","N/A","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","failed","Whether there was a failure.","true","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","stackTrace","Node stacktrace without PII.","string","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Name of the method in the extension that threw the exception. Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.KERNEL_LISTING_PERF","","Telemetry.KernelListingPerf","donjayamanne","N/A","","","firstTime","Whether this is the first time in the session.
(fetching kernels first time in the session is slower, later its cached).
This is a generic property supported for all telemetry (sent by decorators).","boolean","",true
"DS_INTERNAL.KERNEL_LISTING_PERF","","Telemetry.KernelListingPerf","donjayamanne","N/A","","","kind","Whether this telemetry is for listing of all kernels or just python or just non-python.
(fetching kernels first time in the session is slower, later its cached).","","'remote' 
'local' 
'localKernelSpec' 
'localPython' ",false
"DS_INTERNAL.KERNEL_LISTING_PERF","","Telemetry.KernelListingPerf","donjayamanne","N/A","","","duration","Total time taken to list kernels.
Total time taken to list interpreters.","number","",false
"DS_INTERNAL.LOCAL_KERNEL_SPEC_COUNT","Total number of Local kernel specifications.","Telemetry.NumberOfLocalKernelSpecs","donjayamanne","N/A","","","count","Number of kernel specs found on disc.","number","",false
"DS_INTERNAL.NATIVE_VARIABLE_VIEW_LOADED","","Telemetry.NativeVariableViewLoaded","IanMatthewHuff","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.NATIVE.NOTEBOOK_OPEN_COUNT","Total number of Jupyter notebooks or IW opened. Telemetry Sent when VS Code is closed.","Telemetry.NotebookOpenCount","donjayamanne","InteractiveWindow, Notebook","","","count","","number","",false
"DS_INTERNAL.NATIVE.NOTEBOOK_RUN_COUNT","Total number of cells executed. Telemetry Sent when VS Code is closed.","Telemetry.NotebookRunCount","donjayamanne","InteractiveWindow, Notebook","","","count","","number","",false
"DS_INTERNAL.NUMBER_OF_REMOTE_KERNEL_IDS_SAVED","","Telemetry.NumberOfSavedRemoteKernelIds","IanMatthewHuff","","","","count","","number","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.PREFERRED_KERNEL","Telemetry sent when we have attempted to find the preferred kernel.","Telemetry.PreferredKernel","IanMatthewHuff","InteractiveWindow, Notebook","","","result","","","'found' 
'notfound' 
'failed' ",false
"DS_INTERNAL.PREFERRED_KERNEL","Telemetry sent when we have attempted to find the preferred kernel.","Telemetry.PreferredKernel","IanMatthewHuff","InteractiveWindow, Notebook","","","language","","string","",false
"DS_INTERNAL.PREFERRED_KERNEL","Telemetry sent when we have attempted to find the preferred kernel.","Telemetry.PreferredKernel","IanMatthewHuff","InteractiveWindow, Notebook","","","hasActiveInterpreter","","boolean","",true
"DS_INTERNAL.PREFERRED_KERNEL","Telemetry sent when we have attempted to find the preferred kernel.","Telemetry.PreferredKernel","IanMatthewHuff","InteractiveWindow, Notebook","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.PREFERRED_KERNEL_EXACT_MATCH","","Telemetry.PreferredKernelExactMatch","IanMatthewHuff","","","","matchedReason","","","",false
"DS_INTERNAL.PYTHON_EXTENSION_INSTALLED_VIA_KERNEL_PICKER","","Telemetry.PythonExtensionInstalledViaKernelPicker","IanMatthewHuff","","","","action","","","'success' 
'failed' ",false
"DS_INTERNAL.PYTHON_EXTENSION_NOT_INSTALLED","","Telemetry.PythonExtensionNotInstalled","IanMatthewHuff","","","","action","","","'displayed' 
'dismissed' 
'download' ",false
"DS_INTERNAL.PYTHON_KERNEL_EXECUTABLE_MATCHES","Telemetry sent for local Python Kernels.
Tracking whether we have managed to launch the kernel that matches the interpreter.
If match=false, then this means we have failed to launch the right kernel.","Telemetry.PythonKerneExecutableMatches","donjayamanne","N/A","KernelStartup","","match","Whether we've managed to correctly identify the Python Environment.","","'true' 
'false' ",false
"DS_INTERNAL.PYTHON_KERNEL_EXECUTABLE_MATCHES","Telemetry sent for local Python Kernels.
Tracking whether we have managed to launch the kernel that matches the interpreter.
If match=false, then this means we have failed to launch the right kernel.","Telemetry.PythonKerneExecutableMatches","donjayamanne","N/A","KernelStartup","","kernelConnectionType","Type of kernel connection, whether its local, remote or a python environment.","","'startUsingLocalKernelSpec' 
'startUsingPythonInterpreter' 
'startUsingRemoteKernelSpec' ",false
"DS_INTERNAL.PYTHON_MODULE_INSTALL","","Telemetry.PythonModuleInstall","donjayamanne","N/A","","","moduleName","","string","",false
"DS_INTERNAL.PYTHON_MODULE_INSTALL","","Telemetry.PythonModuleInstall","donjayamanne","N/A","","","isModulePresent","Whether the module was already (once before) installed into the python environment or
whether this already exists (detected via `pip list`)","","'true' 
null or <empty> ",true
"DS_INTERNAL.PYTHON_MODULE_INSTALL","","Telemetry.PythonModuleInstall","donjayamanne","N/A","","","action","","","'cancelled' 
'displayed' 
'prompted' 
'installed' 
'ignored' 
'disabled' 
'failed' 
'install' 
'donotinstall' 
'differentKernel' 
'error' 
'installedInJupyter' 
'failedToInstallInJupyter' 
'dismissed' 
'moreInfo' ",false
"DS_INTERNAL.PYTHON_MODULE_INSTALL","","Telemetry.PythonModuleInstall","donjayamanne","N/A","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.","string","",true
"DS_INTERNAL.PYTHON_MODULE_INSTALL","","Telemetry.PythonModuleInstall","donjayamanne","N/A","","","pythonEnvType","","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.PYTHON_MODULE_INSTALL","","Telemetry.PythonModuleInstall","donjayamanne","N/A","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.PYTHON_MODULE_INSTALL","","Telemetry.PythonModuleInstall","donjayamanne","N/A","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.PYTHON_NOT_INSTALLED","","Telemetry.PythonNotInstalled","IanMatthewHuff","","","","action","","","'displayed' 
'dismissed' 
'download' ",false
"DS_INTERNAL.RANK_KERNELS_PERF","Total time taken to find a kernel on disc or on a remote machine.","Telemetry.RankKernelsPerf","IanMatthewHuff","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.RAWKERNEL_CREATING_NOTEBOOK","","Telemetry.RawKernelCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","attempts","Total number of attempts and sending a request and waiting for response.","number","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","timedout","Whether we timedout while waiting for response for Kernel info request.","boolean","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.RAWKERNEL_PROCESS_LAUNCH","","Telemetry.RawKernelProcessLaunch","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","stacktrace","This is the callstack at the time that the `dispose` method
is called, intended for us to be able to identify who called
`dispose` on the RawSession.","","null or <empty> ",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","exitReason","The kernel process's exit reason, based on the error
object's reason","","null or <empty> ",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","exitCode","The kernel process's exit code.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_NO_IPYKERNEL","","Telemetry.RawKernelSessionStartNoIpykernel","donjayamanne","Notebook, InteractiveWindow","","","reason","","","0 
1 
2 
3 
4 ",false
"DS_INTERNAL.RAWKERNEL_SESSION_NO_IPYKERNEL","","Telemetry.RawKernelSessionStartNoIpykernel","donjayamanne","Notebook, InteractiveWindow","","","failed","Whether there was a failure.","true","",false
"DS_INTERNAL.RAWKERNEL_SESSION_NO_IPYKERNEL","","Telemetry.RawKernelSessionStartNoIpykernel","donjayamanne","Notebook, InteractiveWindow","","","stackTrace","Node stacktrace without PII.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_NO_IPYKERNEL","","Telemetry.RawKernelSessionStartNoIpykernel","donjayamanne","Notebook, InteractiveWindow","","","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_NO_IPYKERNEL","","Telemetry.RawKernelSessionStartNoIpykernel","donjayamanne","Notebook, InteractiveWindow","","","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Name of the method in the extension that threw the exception. Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_NO_IPYKERNEL","","Telemetry.RawKernelSessionStartNoIpykernel","donjayamanne","Notebook, InteractiveWindow","","","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_NO_IPYKERNEL","","Telemetry.RawKernelSessionStartNoIpykernel","donjayamanne","Notebook, InteractiveWindow","","","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_NO_IPYKERNEL","","Telemetry.RawKernelSessionStartNoIpykernel","donjayamanne","Notebook, InteractiveWindow","","","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_NO_IPYKERNEL","","Telemetry.RawKernelSessionStartNoIpykernel","donjayamanne","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","isRequestToShutdownRestartSession","This indicates whether the session being shutdown
is a restart session.","","true 
false 
null or <empty> ",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","stacktrace","This is the callstack at the time that the `shutdownSession`
method is called, intended for us to be ale to identify who
tried to shutdown the session.","","null or <empty> ",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession`
method is called.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","failed","Whether there was a failure.","true","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.","","cancelled 
timeout 
daemon 
zmq 
debugger 
kerneldied 
kernelpromisetimeout 
jupytersession 
jupyterconnection 
jupyterinstall 
jupyterselfcert 
jupyterexpiredcert 
jupyterselfexpiredcert 
invalidkernel 
noipykernel 
fetcherror 
notinstalled 
kernelspecnotfound 
unsupportedKernelSpec 
sessionDisposed 
nodeonly 
remotejupyterserverconnection 
localjupyterserverconnection 
remotejupyterserveruriprovider 
invalidremotejupyterserverurihandle 
unknown ",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel and have a failureCategory. ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","failed","Whether there was a failure.","true","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","stackTrace","Node stacktrace without PII.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Name of the method in the extension that threw the exception. Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_EXCEPTION","","Telemetry.RawKernelSessionStartException","donjayamanne","Notebook, InteractiveWindow","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_SUCCESS","","Telemetry.RawKernelSessionStartSuccess","donjayamanne","Notebook, InteractiveWindow","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.RAWKERNEL_START_RAW_SESSION","","Telemetry.RawKernelStartRawSession","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.REMOTE_KERNEL_SPEC_COUNT","Total number of Remote kernel specifications.","Telemetry.NumberOfRemoteKernelSpecs","donjayamanne","N/A","","","count","Number of remote kernel specs.","number","",false
"DS_INTERNAL.RESTART_JUPYTER_TIME","Total time taken to restart a kernel.
Identical to `Telemetry.RestartKernel`","Telemetry.RestartJupyterTime","donjayamanne","InteractiveWindow, Notebook","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.RESTART_KERNEL","Total time taken to restart a kernel.
Identical to `Telemetry.RestartJupyterTime`","Telemetry.RestartKernel","donjayamanne","InteractiveWindow, Notebook","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.RUNTEST","","Telemetry.RunTest","amunger","","","","testName","","string","",false
"DS_INTERNAL.RUNTEST","","Telemetry.RunTest","amunger","","","","testResult","","string","",false
"DS_INTERNAL.RUNTEST","","Telemetry.RunTest","amunger","","","","perfWarmup","","'true'","",true
"DS_INTERNAL.RUNTEST","","Telemetry.RunTest","amunger","","","","commitHash","","string","",true
"DS_INTERNAL.RUNTEST","","Telemetry.RunTest","amunger","","","","timedCheckpoints","","string","",true
"DS_INTERNAL.SELECT_JUPYTER_INTERPRETER","","Telemetry.SelectJupyterInterpreter","donjayamanne","N/A","KernelStartup","","result","The result of the selection.
notSelected - No interpreter was selected.
selected - An interpreter was selected (and configured to have jupyter and notebook).
installationCancelled - Installation of jupyter and/or notebook was cancelled for an interpreter.","","'notSelected' 
'selected' 
'installationCancelled' ",true
"DS_INTERNAL.SHOW_DATA_PANDAS_INSTALL_CANCELED","","Telemetry.PandasInstallCanceled","IanMatthewHuff","","","","version","","string","",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.START_JUPYTER_PROCESS","","Telemetry.StartJupyterProcess","donjayamanne","N/A","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","userExecutedCell","Whether the user executed a cell.","boolean","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","kernelId","Hash of the Kernel Connection id.","string","",false
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)","boolean","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.","string","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.","string","",false
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.","boolean","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.","","Unknown 
Conda 
VirtualEnv 
PipEnv 
Pyenv 
Venv 
WindowsStore 
Poetry 
VirtualEnvWrapper 
Global 
System ",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)","string","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)","string","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","pythonEnvironmentCount","Total number of python environments.","number","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.","string","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","kernelLanguage","Language of the kernel connection.","string","",false
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","interruptCount","This number gets reset after we attempt a restart or change kernel.","number","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","restartCount","This number gets reset after change the kernel.","number","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","startFailureCount","Number of times starting the kernel failed.","number","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","switchKernelCount","Number of times the kernel was changed.","number","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.","number","",false
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.","number","",false
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","kernelLiveCount","Total number of live kernels in the kernel spec list.","number","",false
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.","","jupyterExtension 
3rdPartyExtension ",false
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.","boolean","",true
"DS_INTERNAL.SWITCH_TO_EXISTING_KERNEL","","Telemetry.SwitchToExistingKernel","IanMatthewHuff","","","","language","","string","",false
"DS_INTERNAL.VARIABLE_EXPLORER_FETCH_TIME","","Telemetry.VariableExplorerFetchTime","IanMatthewHuff","","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.VARIABLE_EXPLORER_VARIABLE_COUNT","","Telemetry.VariableExplorerVariableCount","IanMatthewHuff","","","","variableCount","","number","",false
"DS_INTERNAL.VSCNOTEBOOK_CELL_TRANSLATION_FAILED","","Telemetry.VSCNotebookCellTranslationFailed","donjayamanne","Notebook, InteractiveWindow","","","isErrorOutput","","boolean","",false
"DS_INTERNAL.WAIT_FOR_IDLE_JUPYTER","","Telemetry.WaitForIdleJupyter","donjayamanne","N/A","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.
Total time taken to list interpreters. Total time taken to list kernels. Time taken. Duration of a measure in milliseconds. Common measurement used across a number of events.","number","",false
"DS_INTERNAL.WEB_FETCH_ERROR","Event sent when trying to talk to a remote server and the browser gives us a generic fetch error","Telemetry.FetchError","unknown","","","","currentTask","What we were doing when the fetch error occurred","'connecting'","",false
"DS_INTERNAL.WEBVIEW_STARTUP","","Telemetry.WebviewStartup","IanMatthewHuff","","","","type","","string","",false
"ENVFILE_WORKSPACE","Telemetry event sent when an environment file is detected in the workspace.","EventName.ENVFILE_WORKSPACE","donjayamanne","N/A","","","hasCustomEnvPath","If there's a custom path specified in the python.envFile workspace settings.","boolean","",false
"ERROR","","ERROR","donjayamanne","N/A","","","failureCategory","","'methodException'","",false
"ERROR","","ERROR","donjayamanne","N/A","","","failureSubCategory","Name of the method in the extension that threw the exception.","string","",false
"ERROR","","ERROR","donjayamanne","N/A","","","failed","Whether there was a failure.","true","",false
"ERROR","","ERROR","donjayamanne","N/A","","","stackTrace","Node stacktrace without PII.","string","",false
"ERROR","","ERROR","donjayamanne","N/A","","","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.","string","",true
"ERROR","","ERROR","donjayamanne","N/A","","","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Name of the method in the extension that threw the exception.","string","",true
"ERROR","","ERROR","donjayamanne","N/A","","","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).","string","",true
"ERROR","","ERROR","donjayamanne","N/A","","","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).","string","",true
"ERROR","","ERROR","donjayamanne","N/A","","","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).","string","",true
"EXTENSION.LOAD","Telemetry event sent with perf measures related to activation and loading of extension.","EventName.EXTENSION_LOAD","donjayamanne","N/A","","","workspaceFolderCount","Number of workspace folders opened","number","",false
"EXTENSION.LOAD","Telemetry event sent with perf measures related to activation and loading of extension.","EventName.EXTENSION_LOAD","donjayamanne","N/A","","","totalActivateTime","Time taken to activate the extension.","number","",false
"EXTENSION.LOAD","Telemetry event sent with perf measures related to activation and loading of extension.","EventName.EXTENSION_LOAD","donjayamanne","N/A","","","codeLoadingTime","Time taken to load the code.","number","",false
"EXTENSION.LOAD","Telemetry event sent with perf measures related to activation and loading of extension.","EventName.EXTENSION_LOAD","donjayamanne","N/A","","","startActivateTime","Time when activation started.","number","",false
"EXTENSION.LOAD","Telemetry event sent with perf measures related to activation and loading of extension.","EventName.EXTENSION_LOAD","donjayamanne","N/A","","","endActivateTime","Time when activation completed.","number","",false
"HASHED_PACKAGE_NAME","Telemetry event sent with hash of an imported python package.
Used to detect the popularity of a package, that would help determine which packages
need to be prioritized when resolving issues with intellisense or supporting similar issues related to a (known) specific package.","EventName.HASHED_PACKAGE_NAME","unknown","N/A","","","hashedNamev2","Hash of the package name","string","",false
"HASHED_PACKAGE_PERF","","EventName.HASHED_PACKAGE_PERF","donjayamanne","N/A","","","duration","Total time taken to list interpreters. Total time taken to list kernels. Time taken.","number","",false
"JUPYTER_EXPERIMENTS_OPT_IN_OUT","Telemetry event sent with details when a user has requested to opt it or out of an experiment group","EventName.JUPYTER_EXPERIMENTS_OPT_IN_OUT","unknown","N/A","","","expNameOptedInto","Carries the name of the experiment user has been opted into manually","string","",true
"JUPYTER_EXPERIMENTS_OPT_IN_OUT","Telemetry event sent with details when a user has requested to opt it or out of an experiment group","EventName.JUPYTER_EXPERIMENTS_OPT_IN_OUT","unknown","N/A","","","expNameOptedOutOf","Carries the name of the experiment user has been opted out of manually","string","",true
"JUPYTER_IS_INSTALLED","","Telemetry.JupyterInstalled","donjayamanne","N/A","","/* Detection of jupyter failed ","failed","","true","",false
"JUPYTER_IS_INSTALLED","","Telemetry.JupyterInstalled","donjayamanne","N/A","","/* Detection of jupyter failed ","reason","","'notInstalled'","",false
"JUPYTER_IS_INSTALLED","","Telemetry.JupyterInstalled","donjayamanne","N/A","","/* Detection of jupyter failed ","frontEnd","","","'notebook' 
'lab' ",false
"JUPYTER_IS_INSTALLED","","Telemetry.JupyterInstalled","donjayamanne","N/A","","Jupyter was successfully detected ","detection","Jupyter is in current path of process owned by VS Code.
I.e. jupyter can be found in the path as defined by the env variable process.env['PATH'].","'process'","",false
"JUPYTER_IS_INSTALLED","","Telemetry.JupyterInstalled","donjayamanne","N/A","","Jupyter was successfully detected ","frontEnd","","","'notebook' 
'lab' ",false
"JUPYTER_IS_INSTALLED","","Telemetry.JupyterInstalled","donjayamanne","N/A","","Jupyter was successfully detected ","frontEndVersion","Version of the form 6.11, 4.8","number","",false
"PYTHON_INTERPRETER_ACTIVATION_ENVIRONMENT_VARIABLES","","EventName.PYTHON_INTERPRETER_ACTIVATION_ENVIRONMENT_VARIABLES","donjayamanne","N/A","","","hasEnvVars","Carries `true` if environment variables are present, `false` otherwise","boolean","",true
"PYTHON_INTERPRETER_ACTIVATION_ENVIRONMENT_VARIABLES","","EventName.PYTHON_INTERPRETER_ACTIVATION_ENVIRONMENT_VARIABLES","donjayamanne","N/A","","","failed","Carries `true` if fetching environment variables failed, `false` otherwise","boolean","",true
"PYTHON_INTERPRETER_ACTIVATION_ENVIRONMENT_VARIABLES","","EventName.PYTHON_INTERPRETER_ACTIVATION_ENVIRONMENT_VARIABLES","donjayamanne","N/A","","","activatedInTerminal","Whether the environment was activated within a terminal or not.","boolean","",true
"PYTHON_INTERPRETER_ACTIVATION_ENVIRONMENT_VARIABLES","","EventName.PYTHON_INTERPRETER_ACTIVATION_ENVIRONMENT_VARIABLES","donjayamanne","N/A","","","activatedByWrapper","Whether the environment was activated by the wrapper class.
If `true`, this telemetry is sent by the class that wraps the two activation providers   .","boolean","",true
"TERMINAL_ENV_VAR_EXTRACTION","Telemetry sent only when we fail to extract the env variables for a shell.","Telemetry.TerminalEnvVariableExtraction","donjayamanne","","","","failed","","true","",false
"TERMINAL_ENV_VAR_EXTRACTION","Telemetry sent only when we fail to extract the env variables for a shell.","Telemetry.TerminalEnvVariableExtraction","donjayamanne","","","","reason","","","unknownOs 
getWorkspace 
terminalCreation 
fileCreation 
commandExecution 
waitForCommand 
parseOutput ",false
"TERMINAL_SHELL_IDENTIFICATION","","Telemetry.TerminalShellIdentification","donjayamanne","","","","failed","","boolean","",false
"TERMINAL_SHELL_IDENTIFICATION","","Telemetry.TerminalShellIdentification","donjayamanne","","","","reason","","","'unknownShell' 
null or <empty> ",false
"TERMINAL_SHELL_IDENTIFICATION","","Telemetry.TerminalShellIdentification","donjayamanne","","","","terminalProvided","","boolean","",false
"TERMINAL_SHELL_IDENTIFICATION","","Telemetry.TerminalShellIdentification","donjayamanne","","","","shellIdentificationSource","","","'terminalName' 
'settings' 
'environment' 
'default' 
'vscode' ",false
"TERMINAL_SHELL_IDENTIFICATION","","Telemetry.TerminalShellIdentification","donjayamanne","","","","hasCustomShell","","","null or <empty> 
true 
false ",false
"TERMINAL_SHELL_IDENTIFICATION","","Telemetry.TerminalShellIdentification","donjayamanne","","","","hasShellInEnv","","","null or <empty> 
true 
false ",false