"eventName","eventDescription","eventConstant","owner","feature","tags","groupDescription","propertyName","propertyDescription","propertyType","propertyPossibleValues","propertyIsNullable"
"DATASCIENCE.ADD_CELL_BELOW","User adds a cell below the current cell for IW.","Telemetry.AddCellBelow","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.CLICKED_EXPORT_NOTEBOOK_AS_QUICK_PICK","User exports the IW or Notebook to a specific format.","Telemetry.ClickedExportNotebookAsQuickPick","IanMatthewHuff","Import-Export, InteractiveWindow","","","format","What format to export to was selected in the quick pick.","","pdf ()
html ()
python ()
ipynb ()",false
"DATASCIENCE.CREATE_NEW_INTERACTIVE","Command to create a new Interactive Window.","Telemetry.CreateNewInteractive","amunger","InteractiveWindow","","","","","","",""
"DATASCIENCE.DATA_VIEWER_DATA_DIMENSIONALITY","Telemetry event sent when a slice is first applied in a
data viewer instance to a sliceable Python variable.","Telemetry.DataViewerDataDimensionality","IanMatthewHuff","DataFrameViewer","","","numberOfDimensions","This property represents the number of dimensions
on the target variable being sliced. This should
always be 2 at minimum.","number","",false
"DATASCIENCE.DATA_VIEWER_SLICE_ENABLEMENT_STATE_CHANGED","Telemetry event sent whenever the user toggles the checkbox
controlling whether a slice is currently being applied to an
n-dimensional variable.","Telemetry.DataViewerSliceEnablementStateChanged","IanMatthewHuff","DataFrameViewer","","","newState","This property is either 'checked' when the result of toggling
the checkbox is for slicing to be enabled, or 'unchecked'
when the result of toggling the checkbox is for slicing
to be disabled.","","checked ()
unchecked ()",false
"DATASCIENCE.DATA_VIEWER_SLICE_OPERATION","Telemetry event sent whenever the user applies a valid slice
to a sliceable Python variable in the data viewer.","Telemetry.DataViewerSliceOperation","IanMatthewHuff","DataFrameViewer","","","source","This property indicates whether the slice operation
was triggered using the dropdown or the textbox in
the slice control panel. `source` is one of `dropdown`,
`textbox`, or `checkbox`.","","dropdown ()
textbox ()
checkbox ()",false
"DATASCIENCE.DEBUG_CONTINUE","Telemetry event sent when user hits the `continue` button while debugging IW","Telemetry.DebugContinue","roblourens","Debugger","","","","","","",""
"DATASCIENCE.DEBUG_CURRENT_CELL","Telemetry event sent when user debugs the cell in the IW","Telemetry.DebugCurrentCell","roblourens","Debugger","","","","","","",""
"DATASCIENCE.DEBUG_FILE_INTERACTIVE","Telemetry event sent when user debugs the file in the IW","Telemetry.DebugFileInteractive","roblourens","Debugger","","","","","","",""
"DATASCIENCE.DEBUG_STEP_OVER","Telemetry event sent when user hits the `step over` button while debugging IW","Telemetry.DebugStepOver","roblourens","Debugger","","","","","","",""
"DATASCIENCE.DEBUG_STOP","Telemetry event sent when user hits the `stop` button while debugging IW","Telemetry.DebugStop","roblourens","Debugger","","","","","","",""
"DATASCIENCE.DEBUGGING.CLICKED_ON_SETUP","Sent when the user accepts the prompt to install ipykernel 6 automatically.","DebuggingTelemetry.clickedOnSetup","roblourens","Debugger","","","","","","",""
"DATASCIENCE.DEBUGGING.CLICKED_RUN_AND_DEBUG_CELL","Sent when the user attempts to start debugging a notebook cell.","DebuggingTelemetry.clickedRunAndDebugCell","roblourens","Debugger","","","","","","",""
"DATASCIENCE.DEBUGGING.CLICKED_RUNBYLINE","Sent when the user attempts to start run by line.","DebuggingTelemetry.clickedRunByLine","roblourens","Debugger","","","","","","",""
"DATASCIENCE.DEBUGGING.CLOSED_MODAL","Sent when the user dismisses the prompt to install ipykernel 6 automatically.","DebuggingTelemetry.closedModal","roblourens","Debugger","","","","","","",""
"DATASCIENCE.DEBUGGING.ENDED_SESSION","Sent when a notebook debugging session ends.","DebuggingTelemetry.endedSession","roblourens","Debugger","","","reason","The reason the session ended.","","'normally' 
'onKernelDisposed' 
'onAnInterrupt' 
'onARestart' 
'withKeybinding' ",false
"DATASCIENCE.DEBUGGING.IPYKERNEL6_STATUS","An event describing whether the environment has ipykernel 6 installed.","DebuggingTelemetry.ipykernel6Status","roblourens","Debugger","","","status","Whether ipykernel 6 is installed.","","'installed' 
'notInstalled' ",false
"DATASCIENCE.DEBUGGING.SUCCESSFULLY_STARTED_IW_JUPYTER","Telemetry sent when we have managed to successfully start the Interactive Window debugger using the Jupyter protocol.","DebuggingTelemetry.successfullyStartedIWJupyterDebugger","roblourens","Debugger","","","","","","",""
"DATASCIENCE.DEBUGGING.SUCCESSFULLY_STARTED_RUN_AND_DEBUG_CELL","Sent when the user successfully starts debugging a notebook cell.","DebuggingTelemetry.successfullyStartedRunAndDebugCell","roblourens","Debugger","","","","","","",""
"DATASCIENCE.DEBUGGING.SUCCESSFULLY_STARTED_RUNBYLINE","Sent when the run by line session starts successfully.","DebuggingTelemetry.successfullyStartedRunByLine","roblourens","Debugger","","","","","","",""
"DATASCIENCE.DISABLE_INTERACTIVE_SHIFT_ENTER","Disables using Shift+Enter to run code in IW (this is in response to the prompt recommending users to enable this to use the IW)","Telemetry.DisableInteractiveShiftEnter","amunger","InteractiveWindow","","","","","","",""
"DATASCIENCE.ENABLE_INTERACTIVE_SHIFT_ENTER","Enable using Shift+Enter to run code in IW (this is in response to the prompt recommending users to enable this to use the IW)","Telemetry.EnableInteractiveShiftEnter","amunger","InteractiveWindow","","","","","","",""
"DATASCIENCE.ENTER_JUPYTER_URI","A URI has been selected and is being checked for validity.","Telemetry.EnterJupyterURI","IanMatthewHuff","KernelPicker","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DATASCIENCE.EXECUTE_CELL","Sent when a user executes a cell.","Telemetry.ExecuteCell","donjayamanne","Notebook, InteractiveWindow","Cell Execution","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DATASCIENCE.EXPORT_NOTEBOOK_AS","Called on the completion of exporting a Jupyter notebook into a new format
This is the result of the operation, so it's not tagged as a user action as that
comes from ExportNotebookAsCommand or ExportNotebookAsQuickPick","Telemetry.ExportNotebookAs","IanMatthewHuff","Import-Export","","","cancelled","Was the export operation cancelled.","boolean","",true
"DATASCIENCE.EXPORT_NOTEBOOK_AS","Called on the completion of exporting a Jupyter notebook into a new format
This is the result of the operation, so it's not tagged as a user action as that
comes from ExportNotebookAsCommand or ExportNotebookAsQuickPick","Telemetry.ExportNotebookAs","IanMatthewHuff","Import-Export","","","format","What format was the export performed to.","","pdf ()
html ()
python ()
ipynb ()",false
"DATASCIENCE.EXPORT_NOTEBOOK_AS","Called on the completion of exporting a Jupyter notebook into a new format
This is the result of the operation, so it's not tagged as a user action as that
comes from ExportNotebookAsCommand or ExportNotebookAsQuickPick","Telemetry.ExportNotebookAs","IanMatthewHuff","Import-Export","","","opened","Did the user end with opening the file in VS Code.","boolean","",true
"DATASCIENCE.EXPORT_NOTEBOOK_AS","Called on the completion of exporting a Jupyter notebook into a new format
This is the result of the operation, so it's not tagged as a user action as that
comes from ExportNotebookAsCommand or ExportNotebookAsQuickPick","Telemetry.ExportNotebookAs","IanMatthewHuff","Import-Export","","","successful","Was the export operation successful.","boolean","",true
"DATASCIENCE.EXPORT_NOTEBOOK_AS_COMMAND","Called when user exports a Jupyter Notebook or IW into a Python file, HTML, PDF, etc.
Command is `Jupyter: Export to Python Script` or `Jupyter: Export to HTML`
Basically user is exporting some jupyter notebook or IW into a Python file or other.","Telemetry.ExportNotebookAsCommand","IanMatthewHuff","Import-Export","","","format","What format was the export performed to.","","pdf ()
html ()
python ()
ipynb ()",false
"DATASCIENCE.EXPORT_NOTEBOOK_AS_FAILED","The Export Notebook operation failed.","Telemetry.ExportNotebookAsFailed","IanMatthewHuff","Import-Export","","","format","What format was the export performed to.","","pdf ()
html ()
python ()
ipynb ()",false
"DATASCIENCE.EXPORT_PYTHON_FILE","User exports a .py file with cells as a Jupyter Notebook.","Telemetry.ExportPythonFileInteractive","IanMatthewHuff","Import-Export, InteractiveWindow","","","","","","",""
"DATASCIENCE.EXPORT_PYTHON_FILE_AND_OUTPUT","User exports a .py file with cells along with the outputs which that file would generate in the Interactive Windows as a Jupyter Notebook.","Telemetry.ExportPythonFileAndOutputInteractive","IanMatthewHuff","Import-Export, InteractiveWindow","","","","","","",""
"DATASCIENCE.FAILED_SHOW_DATA_EXPLORER","Failed to show the data viewer via the variable view.","Telemetry.FailedShowDataViewer","IanMatthewHuff","DataFrameViewer, VariableViewer","","","","","","",""
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","Telemetry sent when we fail to create a Notebook Controller (an entry for the UI kernel list in Native Notebooks).","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","KernelPicker","","","failed","Whether there was a failure.
Common to most of the events.","true","",false
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","Telemetry sent when we fail to create a Notebook Controller (an entry for the UI kernel list in Native Notebooks).","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","KernelPicker","","","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.
Common to most of the events.","string","",true
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","Telemetry sent when we fail to create a Notebook Controller (an entry for the UI kernel list in Native Notebooks).","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","KernelPicker","","","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Common to most of the events.","string","",true
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","Telemetry sent when we fail to create a Notebook Controller (an entry for the UI kernel list in Native Notebooks).","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","KernelPicker","","","kind","What kind of kernel spec did we fail to create.","","'startUsingPythonInterpreter' 
'startUsingDefaultKernel' 
'startUsingLocalKernelSpec' 
'startUsingRemoteKernelSpec' 
'connectToLiveRemoteKernel' ",false
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","Telemetry sent when we fail to create a Notebook Controller (an entry for the UI kernel list in Native Notebooks).","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","KernelPicker","","","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","Telemetry sent when we fail to create a Notebook Controller (an entry for the UI kernel list in Native Notebooks).","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","KernelPicker","","","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","Telemetry sent when we fail to create a Notebook Controller (an entry for the UI kernel list in Native Notebooks).","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","KernelPicker","","","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DATASCIENCE.FAILED_TO_CREATE_CONTROLLER","Telemetry sent when we fail to create a Notebook Controller (an entry for the UI kernel list in Native Notebooks).","Telemetry.FailedToCreateNotebookController","IanMatthewHuff","KernelPicker","","","stackTrace","Node stacktrace without PII.
Common to most of the events.","string","",false
"DATASCIENCE.GOTO_NEXT_CELL_IN_FILE","Cell Navigation Command in Interactive Window","Telemetry.GotoNextCellInFile","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.GOTO_PREV_CELL_IN_FILE","Cell Navigation Command in Interactive Window","Telemetry.GotoPrevCellInFile","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.IMPORT_NOTEBOOK","Called when user imports a Jupyter Notebook into a Python file.
Command is `Jupyter: Import Jupyter Notebook`
Basically user is exporting some jupyter notebook into a Python file.","Telemetry.ImportNotebook","IanMatthewHuff","Import-Export","","","scope","The command can be called as a command, in which a file then needs to be selected, or with a file
as the context already, in which case the import command doesn't ask for selection.","","'command' 
'file' ",false
"DATASCIENCE.INTERACTIVE_WINDOW_DEBUG_SETUP_CODE_FAILURE","Error information from the debugger output channel while running initialization code.","Telemetry.InteractiveWindowDebugSetupCodeFailure","roblourens","InteractiveWindow, Debugger","","","ename","The error name of the failure.","string","",false
"DATASCIENCE.INTERACTIVE_WINDOW_DEBUG_SETUP_CODE_FAILURE","Error information from the debugger output channel while running initialization code.","Telemetry.InteractiveWindowDebugSetupCodeFailure","roblourens","InteractiveWindow, Debugger","","","evalue","The error value of the failure.","string","",false
"DATASCIENCE.INTERRUPT","User interrupts a cell","Telemetry.Interrupt","donjayamanne","InteractiveWindow, Notebook","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.JUPYTER_KERNEL_API_ACCESS","Telemetry sent when an extension attempts to use our 3rd party API.","Telemetry.JupyterKernelApiAccess","donjayamanne","N/A","","","allowed","Whether or not the extension was able to use the API.","","'yes' 
'no' ",false
"DATASCIENCE.JUPYTER_KERNEL_API_ACCESS","Telemetry sent when an extension attempts to use our 3rd party API.","Telemetry.JupyterKernelApiAccess","donjayamanne","N/A","","","extensionId","Extension Id that's attempting to use the API.","string","",false
"DATASCIENCE.JUPYTER_KERNEL_API_USAGE","Telemetry sent when an extension uses our 3rd party API.","Telemetry.JupyterKernelApiUsage","donjayamanne","N/A","","","extensionId","Extension Id that's attempting to use the API.","string","",false
"DATASCIENCE.JUPYTER_KERNEL_API_USAGE","Telemetry sent when an extension uses our 3rd party API.","Telemetry.JupyterKernelApiUsage","donjayamanne","N/A","","","pemUsed","Name of the API member used.","keyof IExportedKernelService","",false
"DATASCIENCE.JUPYTER_KERNEL_FILTER_USED","Called when the user clicks accept on the kernel filter UI.","Telemetry.JupyterKernelFilterUsed","IanMatthewHuff","KernelPicker","","","","","","",""
"DATASCIENCE.JUPYTER_KERNEL_HIDDEN_VIA_FILTER","Called when a controller that would have been shown is hidden by a filter.","Telemetry.JupyterKernelHiddenViaFilter","IanMatthewHuff","KernelPicker","","","","","","",""
"DATASCIENCE.JUPYTER_NOT_INSTALLED_ERROR_SHOWN","Sent when we display a message informing the user about Jupyter not being installed (or not detected).","Telemetry.JupyterNotInstalledErrorShown","donjayamanne","N/A","KernelStartup","","","","","",""
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DATASCIENCE.KERNEL_CRASH","Sent when Kernel crashes.","Telemetry.KernelCrash","donjayamanne","Notebook, InteractiveWindow","","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DATASCIENCE.KERNEL_SPEC_LANGUAGE","Sent to detect the different languages of kernel specs used.","Telemetry.KernelSpecLanguage","donjayamanne","N/A","KernelStartup","","kind","Whether this is a local or remote kernel.","","'local' 
'remote' ",false
"DATASCIENCE.KERNEL_SPEC_LANGUAGE","Sent to detect the different languages of kernel specs used.","Telemetry.KernelSpecLanguage","donjayamanne","N/A","KernelStartup","","language","Language of the kernelSpec.","string","",false
"DATASCIENCE.KERNEL_SPEC_LANGUAGE","Sent to detect the different languages of kernel specs used.","Telemetry.KernelSpecLanguage","donjayamanne","N/A","KernelStartup","","usesShell","Whether shell is used to start the kernel. E.g. `""/bin/sh""` is used in the argv of the kernelSpec.
OCaml is one such kernel.","boolean","",true
"DATASCIENCE.KERNEL_STARTUP_CODE_FAILURE","Code we run post starting a kernel seems to have failed.","Telemetry.KernelStartupCodeFailure","donjayamanne","Notebook, InteractiveWindow","","","ename","The error name of the failure.","string","",false
"DATASCIENCE.KERNEL_STARTUP_CODE_FAILURE","Code we run post starting a kernel seems to have failed.","Telemetry.KernelStartupCodeFailure","donjayamanne","Notebook, InteractiveWindow","","","evalue","The error value of the failure","string","",false
"DATASCIENCE.NATIVE.OPEN_NOTEBOOK_ALL","Sent when we have opened any Jupyter notebook in a VS Code session.
Not tagging as a user action as this could be something like auto opening a file
from a previous session and not a direct user action.","Telemetry.OpenNotebookAll","IanMatthewHuff","N/A","","","","","","",""
"DATASCIENCE.NO_ACTIVE_KERNEL_SESSION","Send when we want to install data viewer dependendies, but don't have an active kernel session.
Used by the dataViewerDependencyService.","Telemetry.NoActiveKernelSession","IanMatthewHuff","DataFrameViewer","","","","","","",""
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","result","The result of the interrupt,","","success ()
timeout ()
restart ()",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","When interrupt is a success ","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","failed","Whether there was a failure.
Common to most of the events.","true","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","stackTrace","Node stacktrace without PII.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_INTERRUPT","Telemetry sent when user interrupts the kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookInterrupt","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions ","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","startTimeOnly","If true, this is the total time taken to restart the kernel (excluding times to stop current cells and the like).
Also in the case of raw kernels, we keep a separate process running, and when restarting we just switch to that process.
In such cases this value will be `undefined`. In the case of raw kernels this will be true only when starting a new kernel process from scratch.","true","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","Sent to capture just the time taken to restart, see comments. ","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","failed","Whether there was a failure.
Common to most of the events.","true","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","stackTrace","Node stacktrace without PII.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_RESTART","Telemetry sent when user Restarts the Kernel.
Check the `resourceType` to determine whether its a Jupyter Notebook or IW.","Telemetry.NotebookRestart","donjayamanne","Notebook, InteractiveWindow","","If there are unhandled exceptions. ","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","failed","Whether there was a failure.
Common to most of the events.","true","",false
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","stackTrace","Node stacktrace without PII.
Common to most of the events.","string","",false
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DATASCIENCE.NOTEBOOK_START","Send when a kernel starts.","Telemetry.NotebookStart","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DATASCIENCE.OPEN_PLOT_VIEWER","A new instance of the plot viewer was opened.","Telemetry.OpenPlotViewer","IanMatthewHuff","PlotViewer","","","","","","",""
"DATASCIENCE.PYTHON_VARIABLE_FETCHING_CODE_FAILURE","The Python code that we ran to fetch variables had a failure.","Telemetry.PythonVariableFetchingCodeFailure","IanMatthewHuff","VariableViewer","","","ename","The error name of the failure.","string","",false
"DATASCIENCE.PYTHON_VARIABLE_FETCHING_CODE_FAILURE","The Python code that we ran to fetch variables had a failure.","Telemetry.PythonVariableFetchingCodeFailure","IanMatthewHuff","VariableViewer","","","evalue","The error value of the failure","string","",false
"DATASCIENCE.RECOMMENT_EXTENSION","Telemetry sent when we recommend installing an extension.","Telemetry.RecommendExtension","IanMatthewHuff","N/A","","","action","`displayed` - If prompt was displayed
`dismissed` - If prompt was displayed & dismissed by the user
`ok` - If prompt was displayed & ok clicked by the user
`cancel` - If prompt was displayed & cancel clicked by the user
`doNotShowAgain` - If prompt was displayed & doNotShowAgain clicked by the user","","'displayed' 
'dismissed' 
'ok' 
'cancel' 
'doNotShowAgain' ",false
"DATASCIENCE.RECOMMENT_EXTENSION","Telemetry sent when we recommend installing an extension.","Telemetry.RecommendExtension","IanMatthewHuff","N/A","","","extensionId","Extension we recommended the user to install.","string","",false
"DATASCIENCE.REFRESH_DATA_VIEWER","Sent when the jupyter.refreshDataViewer command is invoked","Telemetry.RefreshDataViewer","IanMatthewHuff","DataFrameViewer","","","","","","",""
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DATASCIENCE.RESTART_KERNEL_COMMAND","Telemetry event sent when IW or Notebook is restarted","Telemetry.RestartKernelCommand","donjayamanne","InteractiveWindow, Notebook","","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DATASCIENCE.RUN_ALL_CELLS","Command to Run all cells from the active python file in the Interactive Window","Telemetry.RunAllCells","amunger","InteractiveWindow","","","","","","",""
"DATASCIENCE.RUN_ALL_CELLS_ABOVE","Command to Run all the above cells in the Interactive Window","Telemetry.RunAllCellsAbove","amunger","InteractiveWindow","","","","","","",""
"DATASCIENCE.RUN_BY_LINE_VARIABLE_HOVER","Fired when a user hovers a variable while debugging the IW.","Telemetry.RunByLineVariableHover","roblourens","Debugger","","","","","","",""
"DATASCIENCE.RUN_CELL_AND_ALL_BELOW","Command to Run current cell and all below in the Interactive Window","Telemetry.RunCellAndAllBelow","amunger","InteractiveWindow","","","","","","",""
"DATASCIENCE.RUN_CHANGE_CELL_TO_CODE","Cell Edit Command in Interactive Window","Telemetry.ChangeCellToCode","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_CHANGE_CELL_TO_MARKDOWN","Cell Edit Command in Interactive Window","Telemetry.ChangeCellToMarkdown","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_CURRENT_CELL","Command to Run the current Cell in the Interactive Window","Telemetry.RunCurrentCell","amunger","InteractiveWindow","","","","","","",""
"DATASCIENCE.RUN_CURRENT_CELL_AND_ADD_BELOW","Run the cell and everything below it in the Interactive Window.","Telemetry.RunCurrentCellAndAddBelow","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_CURRENT_CELL_AND_ADVANCE","Command to Run current cell in the Interactive Window and advance cursor to the next cell","Telemetry.RunCurrentCellAndAdvance","amunger","InteractiveWindow","","","","","","",""
"DATASCIENCE.RUN_DELETE_CELLS","Cell Edit Command in Interactive Window","Telemetry.DeleteCells","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_EXTEND_SELECTION_BY_CELL_ABOVE","Cell Selection Command in Interactive Window","Telemetry.ExtendSelectionByCellAbove","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_EXTEND_SELECTION_BY_CELL_BELOW","Cell Selection Command in Interactive Window","Telemetry.ExtendSelectionByCellBelow","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_FILE_INTERACTIVE","Command to Run the active file in the Interactive Window","Telemetry.RunFileInteractive","amunger","InteractiveWindow","","","","","","",""
"DATASCIENCE.RUN_FROM_LINE","Command to Run the active file contents from the cursor location in the Interactive Window","Telemetry.RunFromLine","amunger","InteractiveWindow","","","","","","",""
"DATASCIENCE.RUN_INSERT_CELL_ABOVE","Cell Edit Command in Interactive Window","Telemetry.InsertCellAbove","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_INSERT_CELL_BELOW","Cell Edit Command in Interactive Window","Telemetry.InsertCellBelow","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_INSERT_CELL_BELOW_POSITION","Cell Edit Command in Interactive Window","Telemetry.InsertCellBelowPosition","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_MOVE_CELLS_DOWN","Cell Edit Command in Interactive Window","Telemetry.MoveCellsDown","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_MOVE_CELLS_UP","Cell Edit Command in Interactive Window","Telemetry.MoveCellsUp","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_SELECT_CELL","Cell Selection Command in Interactive Window","Telemetry.SelectCell","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_SELECT_CELL_CONTENTS","Cell Selection Command in Interactive Window","Telemetry.SelectCellContents","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.RUN_SELECTION_OR_LINE","Command to Run a Selection or Line in the Interactive Window","Telemetry.RunSelectionOrLine","amunger","InteractiveWindow","","","","","","",""
"DATASCIENCE.RUN_TO_LINE","Command to Run the active file contents up to the cursor location in the Interactive Window","Telemetry.RunToLine","amunger","InteractiveWindow","","","","","","",""
"DATASCIENCE.SELECT_JUPYTER_INTERPRETER_Command","Telemetry sent when user selects an interpreter to start jupyter server.","Telemetry.SelectJupyterInterpreterCommand","donjayamanne","N/A","KernelStartup","","","","","",""
"DATASCIENCE.SELECT_JUPYTER_URI","User has triggered selection of a Jupyter URI for a remote connection.
Note: Might not come from a direct user action.","Telemetry.SelectJupyterURI","IanMatthewHuff","KernelPicker","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DATASCIENCE.SELECT_LOCAL_JUPYTER_KERNEL","Kernel was switched to a local kernel connection.","Telemetry.SelectLocalJupyterKernel","IanMatthewHuff","KernelPicker","","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DATASCIENCE.SELECT_REMOTE_JUPYTER_KERNEL","Kernel was switched to a remote kernel connection.","Telemetry.SelectRemoteJupyterKernel","IanMatthewHuff","KernelPicker","","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DATASCIENCE.SELFCERTSMESSAGECLOSE","Sent when users chose not to allow connecting to Jupyter over HTTPS when certificate isn't trusted by a trusted CA.","Telemetry.SelfCertsMessageClose","donjayamanne","N/A","","","","","","",""
"DATASCIENCE.SELFCERTSMESSAGEENABLED","Sent when users chose to use self-signed certificates when connecting to Jupyter over https.
Basically this means users has chosen to connect to Jupyter over HTTPS when certificate isn't trusted by a trusted CA.","Telemetry.SelfCertsMessageEnabled","donjayamanne","N/A","","","","","","",""
"DATASCIENCE.SET_JUPYTER_URI_LOCAL","Jupyter URI was set to local.","Telemetry.SetJupyterURIToLocal","IanMatthewHuff","KernelPicker","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.SET_JUPYTER_URI_UI_DISPLAYED","This telemetry tracks the display of the Picker for Jupyter Remote servers.","Telemetry.SetJupyterURIUIDisplayed","IanMatthewHuff","KernelPicker","","","commandSource","This telemetry tracks the source of this UI.
nonUser - Invoked internally by our code.
toolbar - Invoked by user from Native or Interactive window toolbar.
commandPalette - Invoked from command palette by the user.
nativeNotebookStatusBar - Invoked from Native notebook statusbar.
nativeNotebookToolbar - Invoked from Native notebook toolbar.","","nonUser ()
toolbar ()
commandPalette ()
nativeNotebookStatusBar ()
nativeNotebookToolbar ()
errorHandler ()
prompt ()",false
"DATASCIENCE.SET_JUPYTER_URI_USER_SPECIFIED","Jupyter URI was valid and set to a remote setting.","Telemetry.SetJupyterURIToUserSpecified","IanMatthewHuff","KernelPicker","","","azure","Was the URI set to an Azure uri.","boolean","",false
"DATASCIENCE.SHOW_DATA_EXPLORER","Request was made to show the data viewer with specific data frame info.","Telemetry.ShowDataViewer","IanMatthewHuff","DataFrameViewer","","","columns","Count of columns in the target data frame.","","null or <empty> ",false
"DATASCIENCE.SHOW_DATA_EXPLORER","Request was made to show the data viewer with specific data frame info.","Telemetry.ShowDataViewer","IanMatthewHuff","DataFrameViewer","","","rows","Count of rows in the target data frame.","","null or <empty> ",false
"DATASCIENCE.SHOW_DATA_EXPLORER_ROWS_LOADED","Data viewer loads rows in chunks, this event is sent when the rows have all been loaded","Telemetry.ShowDataViewerRowsLoaded","IanMatthewHuff","DataFrameViewer","","","rowsTimer","Timer to indicate how long it took to load all the rows","","null or <empty> ",false
"DATASCIENCE.START_SHOW_DATA_EXPLORER","User requested to open the data frame viewer.","Telemetry.StartShowDataViewer","IanMatthewHuff","DataFrameViewer","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DATASCIENCE.USER_DID_NOT_INSTALL_JUPYTER","Sent when user click `cancel` button when prompted to install Jupyter.","Telemetry.UserDidNotInstallJupyter","donjayamanne","N/A","KernelStartup","","","","","",""
"DATASCIENCE.USER_DID_NOT_INSTALL_PANDAS","Prompted to install Pandas and chose not to install
Note: This could be just ignoring the UI so not a user action.","Telemetry.UserDidNotInstallPandas","IanMatthewHuff","DataFrameViewer","","","","","","",""
"DATASCIENCE.USER_INSTALLED_JUPYTER","Sent when user installs Jupyter.","Telemetry.UserInstalledJupyter","donjayamanne","N/A","KernelStartup","","","","","",""
"DATASCIENCE.USER_INSTALLED_PANDAS","Installed the python Pandas package.","Telemetry.UserInstalledPandas","IanMatthewHuff","DataFrameViewer","","","","","","",""
"DATAVIEWER.USING_INTERPRETER","When the Data Viewer installer is using a Python interpreter to do the install.","Telemetry.DataViewerUsingInterpreter","IanMatthewHuff","DataFrameViewer","","","","","","",""
"DATAVIEWER.USING_KERNEL","When the Data Viewer installer is using the Kernel to do the install.","Telemetry.DataViewerUsingKernel","IanMatthewHuff","DataFrameViewer","","","","","","",""
"DS_INTERNAL.ACTIVE_INTERPRETER_LISTING_PERF","Total time taken by Python extension to return the active Python environment.","Telemetry.ActiveInterpreterListingPerf","donjayamanne","N/A","","","duration","Total time taken to list interpreters.","number","",false
"DS_INTERNAL.ACTIVE_INTERPRETER_LISTING_PERF","Total time taken by Python extension to return the active Python environment.","Telemetry.ActiveInterpreterListingPerf","donjayamanne","N/A","","","firstTime","Whether this is the first time in the session.
(fetching kernels first time in the session is slower, later its cached).
This is a generic property supported for all telemetry (sent by decorators).","boolean","",true
"DS_INTERNAL.CELL_OUTPUT_MIME_TYPE","Mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.CellOutputMimeType","donjayamanne","N/A","","","mimeType","Mimetype of the output.","string","",false
"DS_INTERNAL.CELL_OUTPUT_MIME_TYPE","Mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.CellOutputMimeType","donjayamanne","N/A","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.CELL_OUTPUT_MIME_TYPE","Mime type of a cell output.
Used to detect the popularity of a mime type, that would help determine which mime types are most common.
E.g. if we see widget mimetype, then we know how many use ipywidgets and the like and helps us prioritize widget issues,
or prioritize rendering of widgets when opening an existing notebook or the like.","Telemetry.CellOutputMimeType","donjayamanne","N/A","","","when","Whether the package was detected in an existing file (upon open, upon save, upon close) or when it was being used during execution.","","'onExecution' 
'onOpenCloseOrSave' ",false
"DS_INTERNAL.CODE_LENS_ACQ_TIME","How long on average we spent parsing code lens. Sent on shutdown.","Telemetry.CodeLensAverageAcquisitionTime","amunger","InteractiveWindow","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.COMMAND_EXECUTED","A command that the extension contributes is executed.","Telemetry.CommandExecuted","amunger","N/A","","","command","Name of the command executed.","string","",false
"DS_INTERNAL.CONNECTFAILEDJUPYTER","Sent when we have failed to connect to the local Jupyter server we started.","Telemetry.ConnectFailedJupyter","donjayamanne","N/A","KernelStartup","","failed","Whether there was a failure.
Common to most of the events.","true","",false
"DS_INTERNAL.CONNECTFAILEDJUPYTER","Sent when we have failed to connect to the local Jupyter server we started.","Telemetry.ConnectFailedJupyter","donjayamanne","N/A","KernelStartup","","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.
Common to most of the events.","string","",true
"DS_INTERNAL.CONNECTFAILEDJUPYTER","Sent when we have failed to connect to the local Jupyter server we started.","Telemetry.ConnectFailedJupyter","donjayamanne","N/A","KernelStartup","","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Common to most of the events.","string","",true
"DS_INTERNAL.CONNECTFAILEDJUPYTER","Sent when we have failed to connect to the local Jupyter server we started.","Telemetry.ConnectFailedJupyter","donjayamanne","N/A","KernelStartup","","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.CONNECTFAILEDJUPYTER","Sent when we have failed to connect to the local Jupyter server we started.","Telemetry.ConnectFailedJupyter","donjayamanne","N/A","KernelStartup","","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.CONNECTFAILEDJUPYTER","Sent when we have failed to connect to the local Jupyter server we started.","Telemetry.ConnectFailedJupyter","donjayamanne","N/A","KernelStartup","","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.CONNECTFAILEDJUPYTER","Sent when we have failed to connect to the local Jupyter server we started.","Telemetry.ConnectFailedJupyter","donjayamanne","N/A","KernelStartup","","stackTrace","Node stacktrace without PII.
Common to most of the events.","string","",false
"DS_INTERNAL.CONNECTLOCALJUPYTER","Sent when we have successfully connected to a local jupyter server.","Telemetry.ConnectLocalJupyter","donjayamanne","N/A","KernelStartup","","","","","",""
"DS_INTERNAL.CONNECTREMOTEEXPIREDCERTFAILEDJUPYTER","Jupyter server's certificate has expired.","Telemetry.ConnectRemoteExpiredCertFailedJupyter","donjayamanne","N/A","KernelStartup","","","","","",""
"DS_INTERNAL.CONNECTREMOTEFAILEDJUPYTER","Sent when we fail to connect to a remote jupyter server.","Telemetry.ConnectRemoteFailedJupyter","donjayamanne","N/A","KernelStartup","","failed","Whether there was a failure.
Common to most of the events.","true","",false
"DS_INTERNAL.CONNECTREMOTEFAILEDJUPYTER","Sent when we fail to connect to a remote jupyter server.","Telemetry.ConnectRemoteFailedJupyter","donjayamanne","N/A","KernelStartup","","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.
Common to most of the events.","string","",true
"DS_INTERNAL.CONNECTREMOTEFAILEDJUPYTER","Sent when we fail to connect to a remote jupyter server.","Telemetry.ConnectRemoteFailedJupyter","donjayamanne","N/A","KernelStartup","","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Common to most of the events.","string","",true
"DS_INTERNAL.CONNECTREMOTEFAILEDJUPYTER","Sent when we fail to connect to a remote jupyter server.","Telemetry.ConnectRemoteFailedJupyter","donjayamanne","N/A","KernelStartup","","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.CONNECTREMOTEFAILEDJUPYTER","Sent when we fail to connect to a remote jupyter server.","Telemetry.ConnectRemoteFailedJupyter","donjayamanne","N/A","KernelStartup","","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.CONNECTREMOTEFAILEDJUPYTER","Sent when we fail to connect to a remote jupyter server.","Telemetry.ConnectRemoteFailedJupyter","donjayamanne","N/A","KernelStartup","","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.CONNECTREMOTEFAILEDJUPYTER","Sent when we fail to connect to a remote jupyter server.","Telemetry.ConnectRemoteFailedJupyter","donjayamanne","N/A","KernelStartup","","stackTrace","Node stacktrace without PII.
Common to most of the events.","string","",false
"DS_INTERNAL.CONNECTREMOTEJUPYTER","Sent when we have successfully connected to a remote jupyter server.","Telemetry.ConnectRemoteJupyter","donjayamanne","N/A","KernelStartup, Remote","","","","","",""
"DS_INTERNAL.CONNECTREMOTEJUPYTER_VIA_LOCALHOST","Connecting to an existing Jupyter server, but connecting to localhost.","Telemetry.ConnectRemoteJupyterViaLocalHost","donjayamanne","N/A","KernelStartup","","","","","",""
"DS_INTERNAL.CONNECTREMOTESELFCERTFAILEDJUPYTER","Jupyter server's certificate is not from a trusted authority.","Telemetry.ConnectRemoteSelfCertFailedJupyter","donjayamanne","N/A","KernelStartup","","","","","",""
"DS_INTERNAL.EXECUTE_CELL_PERCEIVED_COLD","Telemetry sent to capture first time execution of a cell.
If `notebook = true`, this its telemetry for Jupyter notebooks, else applies to IW.","Telemetry.ExecuteCellPerceivedCold","donjayamanne","InteractiveWindow, Notebook","Cell Execution","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.EXECUTE_CELL_PERCEIVED_COLD","Telemetry sent to capture first time execution of a cell.
If `notebook = true`, this its telemetry for Jupyter notebooks, else applies to IW.","Telemetry.ExecuteCellPerceivedCold","donjayamanne","InteractiveWindow, Notebook","Cell Execution","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.EXECUTE_CELL_PERCEIVED_WARM","Telemetry sent to capture subsequent execution of a cell.
If `notebook = true`, this its telemetry for native editor/notebooks.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.ExecuteCellPerceivedWarm","donjayamanne","InteractiveWindow, Notebook","Cell Execution","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.EXECUTE_CELL_PERCEIVED_WARM","Telemetry sent to capture subsequent execution of a cell.
If `notebook = true`, this its telemetry for native editor/notebooks.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.ExecuteCellPerceivedWarm","donjayamanne","InteractiveWindow, Notebook","Cell Execution","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.FAILED_TO_UPDATE_JUPYTER_KERNEL_SPEC","Sent when we fail to update the kernel spec json file.","Telemetry.FailedToUpdateKernelSpec","donjayamanne","N/A","KernelStartup","","failed","Whether there was a failure.
Common to most of the events.","true","",false
"DS_INTERNAL.FAILED_TO_UPDATE_JUPYTER_KERNEL_SPEC","Sent when we fail to update the kernel spec json file.","Telemetry.FailedToUpdateKernelSpec","donjayamanne","N/A","KernelStartup","","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.
Common to most of the events.","string","",true
"DS_INTERNAL.FAILED_TO_UPDATE_JUPYTER_KERNEL_SPEC","Sent when we fail to update the kernel spec json file.","Telemetry.FailedToUpdateKernelSpec","donjayamanne","N/A","KernelStartup","","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Common to most of the events.","string","",true
"DS_INTERNAL.FAILED_TO_UPDATE_JUPYTER_KERNEL_SPEC","Sent when we fail to update the kernel spec json file.","Telemetry.FailedToUpdateKernelSpec","donjayamanne","N/A","KernelStartup","","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.FAILED_TO_UPDATE_JUPYTER_KERNEL_SPEC","Sent when we fail to update the kernel spec json file.","Telemetry.FailedToUpdateKernelSpec","donjayamanne","N/A","KernelStartup","","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.FAILED_TO_UPDATE_JUPYTER_KERNEL_SPEC","Sent when we fail to update the kernel spec json file.","Telemetry.FailedToUpdateKernelSpec","donjayamanne","N/A","KernelStartup","","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.FAILED_TO_UPDATE_JUPYTER_KERNEL_SPEC","Sent when we fail to update the kernel spec json file.","Telemetry.FailedToUpdateKernelSpec","donjayamanne","N/A","KernelStartup","","stackTrace","Node stacktrace without PII.
Common to most of the events.","string","",false
"DS_INTERNAL.GET_ACTIVATED_ENV_VARIABLES","Used to capture time taken to get environment variables for a python environment.
Also lets us know whether it worked or not.","Telemetry.GetActivatedEnvironmentVariables","donjayamanne","N/A","","","duration","Time taken.","number","",false
"DS_INTERNAL.GET_ACTIVATED_ENV_VARIABLES","Used to capture time taken to get environment variables for a python environment.
Also lets us know whether it worked or not.","Telemetry.GetActivatedEnvironmentVariables","donjayamanne","N/A","","","envType","Type of the Python environment.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.GET_ACTIVATED_ENV_VARIABLES","Used to capture time taken to get environment variables for a python environment.
Also lets us know whether it worked or not.","Telemetry.GetActivatedEnvironmentVariables","donjayamanne","N/A","","","failed","Whether the env variables were fetched successfully or not.","boolean","",false
"DS_INTERNAL.GET_ACTIVATED_ENV_VARIABLES","Used to capture time taken to get environment variables for a python environment.
Also lets us know whether it worked or not.","Telemetry.GetActivatedEnvironmentVariables","donjayamanne","N/A","","","reason","Reason for not being able to get the env variables.","","'noActivationCommands' 
'unknownOS' 
'emptyVariables' 
'unhandledError' 
'emptyFromCondaRun' 
'emptyFromPython' 
'condaActivationFailed' 
'failedToGetActivatedEnvVariablesFromPython' 
'failedToGetCustomEnvVariables' ",true
"DS_INTERNAL.GET_ACTIVATED_ENV_VARIABLES","Used to capture time taken to get environment variables for a python environment.
Also lets us know whether it worked or not.","Telemetry.GetActivatedEnvironmentVariables","donjayamanne","N/A","","","source","Source where the env variables were fetched from.
If `python`, then env variables were fetched from Python extension.
If `jupyter`, then env variables were fetched from Jupyter extension.","","'python' 
'jupyter' ",false
"DS_INTERNAL.GET_PASSWORD_FAILURE","Sent to indicate we've failed to connect to a Remote Jupyter Server successfully after requesting a password.","Telemetry.GetPasswordFailure","donjayamanne","N/A","","","","","","",""
"DS_INTERNAL.GET_PASSWORD_SUCCESS","Sent to indicate we've connected to a Remote Jupyter Server successfully after requesting a password.","Telemetry.GetPasswordSuccess","donjayamanne","N/A","","","","","","",""
"DS_INTERNAL.INTERACTIVE_FILE_TOOLTIPS_PERF","How long it took to return our hover tooltips for a .py file.","Telemetry.InteractiveFileTooltipsPerf","IanMatthewHuff","InteractiveWindow","IntelliSense","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.INTERACTIVE_FILE_TOOLTIPS_PERF","How long it took to return our hover tooltips for a .py file.","Telemetry.InteractiveFileTooltipsPerf","IanMatthewHuff","InteractiveWindow","IntelliSense","","isResultNull","Result is null if user signalled cancellation or if we timed out","boolean","",false
"DS_INTERNAL.INTERPRETER_LISTING_PERF","Time taken to list the Python interpreters.","Telemetry.InterpreterListingPerf","donjayamanne","N/A","","","duration","Total time taken to list interpreters.","number","",false
"DS_INTERNAL.INTERPRETER_LISTING_PERF","Time taken to list the Python interpreters.","Telemetry.InterpreterListingPerf","donjayamanne","N/A","","","firstTime","Whether this is the first time in the session.
(fetching kernels first time in the session is slower, later its cached).
This is a generic property supported for all telemetry (sent by decorators).","boolean","",true
"DS_INTERNAL.IPYWIDGET_DISCOVER_WIDGETS_NB_EXTENSIONS","Total time taken to discover all IPyWidgets.
This is how long it takes to discover all widgets on disc (from python environment).","Telemetry.DiscoverIPyWidgetNamesPerf","donjayamanne","Notebook, InteractiveWindow","Widgets","","type","Whether we're looking for widgets on local Jupyter environment (local connections) or remote.","","'local' 
'remote' ",false
"DS_INTERNAL.IPYWIDGET_DISCOVERY_ERRORED","Something went wrong in looking for a widget.","Telemetry.HashedIPyWidgetScriptDiscoveryError","donjayamanne","Notebook, InteractiveWindow","Widgets","","","","","",""
"DS_INTERNAL.IPYWIDGET_EXTENSIONJS_INFO","Telemetry event sent once we've successfully or unsuccessfully parsed the extension.js file in the widget folder.
E.g. if we have a widget named ipyvolume, we attempt to parse the nbextensions/ipyvolume/extension.js file to get some info out of it.","Telemetry.IPyWidgetExtensionJsInfo","donjayamanne","Notebook, Notebook","Widgets","Successfully parsed extension.js","patternUsedToRegisterRequireConfig","Pattern (code style) used to register require.config enties.","string","",false
"DS_INTERNAL.IPYWIDGET_EXTENSIONJS_INFO","Telemetry event sent once we've successfully or unsuccessfully parsed the extension.js file in the widget folder.
E.g. if we have a widget named ipyvolume, we attempt to parse the nbextensions/ipyvolume/extension.js file to get some info out of it.","Telemetry.IPyWidgetExtensionJsInfo","donjayamanne","Notebook, Notebook","Widgets","Successfully parsed extension.js","requireEntryPointCount","Total number of entries in the require config.","number","",false
"DS_INTERNAL.IPYWIDGET_EXTENSIONJS_INFO","Telemetry event sent once we've successfully or unsuccessfully parsed the extension.js file in the widget folder.
E.g. if we have a widget named ipyvolume, we attempt to parse the nbextensions/ipyvolume/extension.js file to get some info out of it.","Telemetry.IPyWidgetExtensionJsInfo","donjayamanne","Notebook, Notebook","Widgets","Successfully parsed extension.js","widgetFolderNameHash","Hash of the widget folder name.","string","",false
"DS_INTERNAL.IPYWIDGET_EXTENSIONJS_INFO","Telemetry event sent once we've successfully or unsuccessfully parsed the extension.js file in the widget folder.
E.g. if we have a widget named ipyvolume, we attempt to parse the nbextensions/ipyvolume/extension.js file to get some info out of it.","Telemetry.IPyWidgetExtensionJsInfo","donjayamanne","Notebook, Notebook","Widgets","Failed to parse extension.js. ","failed","Failed to parse extension.js.","true","",false
"DS_INTERNAL.IPYWIDGET_EXTENSIONJS_INFO","Telemetry event sent once we've successfully or unsuccessfully parsed the extension.js file in the widget folder.
E.g. if we have a widget named ipyvolume, we attempt to parse the nbextensions/ipyvolume/extension.js file to get some info out of it.","Telemetry.IPyWidgetExtensionJsInfo","donjayamanne","Notebook, Notebook","Widgets","Failed to parse extension.js. ","failure","Reason for the failure.","","'couldNotLocateRequireConfigStart' 
'couldNotLocateRequireConfigEnd' 
'noRequireConfigEntries' ",false
"DS_INTERNAL.IPYWIDGET_EXTENSIONJS_INFO","Telemetry event sent once we've successfully or unsuccessfully parsed the extension.js file in the widget folder.
E.g. if we have a widget named ipyvolume, we attempt to parse the nbextensions/ipyvolume/extension.js file to get some info out of it.","Telemetry.IPyWidgetExtensionJsInfo","donjayamanne","Notebook, Notebook","Widgets","Failed to parse extension.js. ","patternUsedToRegisterRequireConfig","Pattern (code style) used to register require.config entries.
Pattern (code style) used to register require.config enties.","","null or <empty> ",false
"DS_INTERNAL.IPYWIDGET_EXTENSIONJS_INFO","Telemetry event sent once we've successfully or unsuccessfully parsed the extension.js file in the widget folder.
E.g. if we have a widget named ipyvolume, we attempt to parse the nbextensions/ipyvolume/extension.js file to get some info out of it.","Telemetry.IPyWidgetExtensionJsInfo","donjayamanne","Notebook, Notebook","Widgets","Failed to parse extension.js. ","widgetFolderNameHash","Hash of the widget folder name.","string","",false
"DS_INTERNAL.IPYWIDGET_LOAD_FAILURE","Telemetry event sent when an ipywidget module fails to load. Module name is hashed.","Telemetry.IPyWidgetLoadFailure","donjayamanne","Notebook, InteractiveWindow","Widgets","","isOnline","Whether we've detected a connection to the internet or not (to access the CDN).","boolean","",false
"DS_INTERNAL.IPYWIDGET_LOAD_FAILURE","Telemetry event sent when an ipywidget module fails to load. Module name is hashed.","Telemetry.IPyWidgetLoadFailure","donjayamanne","Notebook, InteractiveWindow","Widgets","","moduleHash","Hash of the widget module.","string","",false
"DS_INTERNAL.IPYWIDGET_LOAD_FAILURE","Telemetry event sent when an ipywidget module fails to load. Module name is hashed.","Telemetry.IPyWidgetLoadFailure","donjayamanne","Notebook, InteractiveWindow","Widgets","","moduleVersion","Version of the module.","string","",false
"DS_INTERNAL.IPYWIDGET_LOAD_FAILURE","Telemetry event sent when an ipywidget module fails to load. Module name is hashed.","Telemetry.IPyWidgetLoadFailure","donjayamanne","Notebook, InteractiveWindow","Widgets","","timedout","Whether we timedout getting the source of the script (fetching script source in extension code).","boolean","",false
"DS_INTERNAL.IPYWIDGET_LOAD_SUCCESS","Telemetry event sent when an ipywidget module loads. Module name is hashed.","Telemetry.IPyWidgetLoadSuccess","donjayamanne","Notebook, InteractiveWindow","Widgets","","moduleHash","Hash of the module name.","string","",false
"DS_INTERNAL.IPYWIDGET_LOAD_SUCCESS","Telemetry event sent when an ipywidget module loads. Module name is hashed.","Telemetry.IPyWidgetLoadSuccess","donjayamanne","Notebook, InteractiveWindow","Widgets","","moduleVersion","Version of the module.","string","",false
"DS_INTERNAL.IPYWIDGET_OVERHEAD","Telemetry event sent to indicate the overhead of syncing the kernel with the UI.","Telemetry.IPyWidgetOverhead","donjayamanne","Notebook, InteractiveWindow","Widgets","","averageWaitTime","Average wait timne.","number","",false
"DS_INTERNAL.IPYWIDGET_OVERHEAD","Telemetry event sent to indicate the overhead of syncing the kernel with the UI.","Telemetry.IPyWidgetOverhead","donjayamanne","Notebook, InteractiveWindow","Widgets","","numberOfMessagesWaitedOn","Number of messages","number","",false
"DS_INTERNAL.IPYWIDGET_OVERHEAD","Telemetry event sent to indicate the overhead of syncing the kernel with the UI.","Telemetry.IPyWidgetOverhead","donjayamanne","Notebook, InteractiveWindow","Widgets","","numberOfRegisteredHooks","Number of registered hook.","number","",false
"DS_INTERNAL.IPYWIDGET_OVERHEAD","Telemetry event sent to indicate the overhead of syncing the kernel with the UI.","Telemetry.IPyWidgetOverhead","donjayamanne","Notebook, InteractiveWindow","Widgets","","totalOverheadInMs","Total time in ms","number","",false
"DS_INTERNAL.IPYWIDGET_PROMPT_TO_USE_CDN","Telemetry sent when we prompt user to use a CDN for IPyWidget scripts.
This is always sent when we display a prompt.","Telemetry.IPyWidgetPromptToUseCDN","donjayamanne","Notebook, InteractiveWindow","Widgets","","","","","",""
"DS_INTERNAL.IPYWIDGET_PROMPT_TO_USE_CDN_SELECTION","Telemetry sent when user does something with the prompt displayed to user about using CDN for IPyWidget scripts.","Telemetry.IPyWidgetPromptToUseCDNSelection","donjayamanne","Notebook, InteractiveWindow","Widgets","","selection","The section made by the user.","","'ok' 
'cancel' 
'dismissed' 
'doNotShowAgain' ",false
"DS_INTERNAL.IPYWIDGET_RENDER_FAILURE","Telemetry event sent when the widget render function fails (note, this may not be sufficient to capture all failures).","Telemetry.IPyWidgetRenderFailure","donjayamanne","Notebook, InteractiveWindow","Widgets","","","","","",""
"DS_INTERNAL.IPYWIDGET_TIME_TO_COPY_NBEXTENSIONS_DIR","Total time take to copy the nb extensions folder.","Telemetry.IPyWidgetNbExtensionCopyTime","donjayamanne","Notebook, Notebook","Widgets","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.IPYWIDGET_UNHANDLED_MESSAGE","Telemetry event sent when the widget tries to send a kernel message but nothing was listening","Telemetry.IPyWidgetUnhandledMessage","donjayamanne","Notebook, InteractiveWindow","Widgets","","msg_type","Type of the protocol message sent by Jupyter kernel.","string","",false
"DS_INTERNAL.IPYWIDGET_USED_BY_USER","Telemetry event sent with name of a Widget that is used.
Helps determine which widgets are used the most, and which are not.
Useful in prioritizing which widgets to work on if things fail to work.","Telemetry.HashedIPyWidgetNameUsed","donjayamanne","Notebook, InteractiveWindow","Widgets","","cdnSearched","Whether we searched CDN or not.","boolean","",false
"DS_INTERNAL.IPYWIDGET_USED_BY_USER","Telemetry event sent with name of a Widget that is used.
Helps determine which widgets are used the most, and which are not.
Useful in prioritizing which widgets to work on if things fail to work.","Telemetry.HashedIPyWidgetNameUsed","donjayamanne","Notebook, InteractiveWindow","Widgets","","hashedName","Hash of the widget module.
If the widget is found on a CDN, then the unhashed name is sent in `moduleName`.","string","",false
"DS_INTERNAL.IPYWIDGET_USED_BY_USER","Telemetry event sent with name of a Widget that is used.
Helps determine which widgets are used the most, and which are not.
Useful in prioritizing which widgets to work on if things fail to work.","Telemetry.HashedIPyWidgetNameUsed","donjayamanne","Notebook, InteractiveWindow","Widgets","","moduleName","Name of the widget module, sent only for cases where `source` is `cdn`.
As that is the onl time we can safely send the name (if its on public CDN then its public information).","string","",true
"DS_INTERNAL.IPYWIDGET_USED_BY_USER","Telemetry event sent with name of a Widget that is used.
Helps determine which widgets are used the most, and which are not.
Useful in prioritizing which widgets to work on if things fail to work.","Telemetry.HashedIPyWidgetNameUsed","donjayamanne","Notebook, InteractiveWindow","Widgets","","source","Where did we find the hashed name (CDN or user environment or remote jupyter).","","'cdn' 
'local' 
'remote' ",true
"DS_INTERNAL.IPYWIDGET_WIDGET_VERSION_NOT_SUPPORTED_LOAD_FAILURE","Telemetry event sent when an ipywidget version that is not supported is used & we have trapped this and warned the user abou it.","Telemetry.IPyWidgetWidgetVersionNotSupportedLoadFailure","donjayamanne","Notebook, InteractiveWindow","Widgets","","moduleHash","Hash of the widget module.","string","",false
"DS_INTERNAL.IPYWIDGET_WIDGET_VERSION_NOT_SUPPORTED_LOAD_FAILURE","Telemetry event sent when an ipywidget version that is not supported is used & we have trapped this and warned the user abou it.","Telemetry.IPyWidgetWidgetVersionNotSupportedLoadFailure","donjayamanne","Notebook, InteractiveWindow","Widgets","","moduleVersion","Version of the module.","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","failed","Whether there was a failure.
Common to most of the events.","true","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.
Common to most of the events.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Common to most of the events.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","stackTrace","Node stacktrace without PII.
Common to most of the events.","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When things fail ","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DS_INTERNAL.JUPYTER_CREATING_NOTEBOOK","Sent to measure the time taken to start a Jupyter Notebook.","Telemetry.JupyterCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","When successfully created ","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DS_INTERNAL.JUPYTER_CUSTOM_COMMAND_LINE","Telemetry event sent to when user customizes the jupyter command line","Telemetry.JupyterCommandLineNonDefault","donjayamanne","N/A","","","","","","",""
"DS_INTERNAL.JUPYTER_INTALLED_BUT_NO_KERNELSPEC_MODULE","Telemetry event sent when jupyter has been found in interpreter but we cannot find kernelspec.","Telemetry.JupyterInstalledButNotKernelSpecModule","donjayamanne","N/A","","","","","","",""
"DS_INTERNAL.JUPYTER_REGISTER_INTERPRETER_AS_KERNEL","Sent to measure the time taken to register an interpreter as a Jupyter kernel.","Telemetry.RegisterInterpreterAsKernel","donjayamanne","N/A","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.JUPYTERSTARTUPCOST","Time taken to start the Jupyter server.","Telemetry.StartJupyter","donjayamanne","N/A","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","condaEnvsSharingSameInterpreter","Total number of conda environments that share the same interpreter
This happens when we create conda envs without the `python` argument.
Such conda envs don't work today in the extension.
Hence users with such environments could hvae issues with starting kernels or packages not getting loaded correctly or at all.","number","",false
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","kernelInterpreterCount","Total number of interpreters in the kernel list.","number","",false
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.
Total number of interpreters in the kernel list.","number","",false
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","kernelLiveCount","Total number of live kernels in the kernel list.","number","",false
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.
Total number of live kernels in the kernel list.","number","",false
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","kernelSpecCount","Total number of kernel specs in the kernel list.","number","",false
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.
Total number of kernel specs in the kernel list.","number","",false
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","localKernelSpecCount","Total number of local kernel specs in the list.","number","",false
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","remoteKernelSpecCount","Total number of remote kernel specs in the list.","number","",false
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DS_INTERNAL.KERNEL_COUNT","Telemetry sent with the total number of different types of kernels in the kernel picker.","Telemetry.KernelCount","donjayamanne","KernelPicker","","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","failed","Whether there was a failure.
Common to most of the events.","true","",false
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.
Common to most of the events.","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Common to most of the events.","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.KERNEL_LAUNCHER_PERF","Total time taken to Launch a raw kernel.","Telemetry.KernelLauncherPerf","donjayamanne","N/A","KernelStartup","","stackTrace","Node stacktrace without PII.
Common to most of the events.","string","",false
"DS_INTERNAL.KERNEL_LISTING_PERF","Time taken to list the kernels.","Telemetry.KernelListingPerf","donjayamanne","N/A","","","duration","Total time taken to list kernels.","number","",false
"DS_INTERNAL.KERNEL_LISTING_PERF","Time taken to list the kernels.","Telemetry.KernelListingPerf","donjayamanne","N/A","","","kind","Whether this telemetry is for listing of all kernels or just python or just non-python.
(fetching kernels first time in the session is slower, later its cached).","","'remote' 
'local' 
'localKernelSpec' 
'localPython' ",false
"DS_INTERNAL.KERNEL_SPEC_NOT_FOUND","Telemetry event sent to indicate 'jupyter kernelspec' is not possible.","Telemetry.KernelSpecNotFound","donjayamanne","N/A","KernelStartup","","","","","",""
"DS_INTERNAL.NATIVE_VARIABLE_VIEW_LOADED","The Variable View webview was loaded.","Telemetry.NativeVariableViewLoaded","IanMatthewHuff","VariableViewer","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.NATIVE_VARIABLE_VIEW_MADE_VISIBLE","The Variable View webview was made visible.","Telemetry.NativeVariableViewMadeVisible","IanMatthewHuff","VariableViewer","","","","","","",""
"DS_INTERNAL.NATIVE.NOTEBOOK_OPEN_COUNT","Total number of Jupyter notebooks or IW opened. Telemetry Sent when VS Code is closed.","Telemetry.NotebookOpenCount","donjayamanne","InteractiveWindow, Notebook","","","count","Total number of notebooks opened in a session.
Not unique.
If usre opens & closes a notebook, that counts as 2.","number","",false
"DS_INTERNAL.NATIVE.NOTEBOOK_RUN_COUNT","Total number of cells executed. Telemetry Sent when VS Code is closed.","Telemetry.NotebookRunCount","donjayamanne","InteractiveWindow, Notebook","","","count","Number of cells executed.
If a cell is executed 10 times, thats counted as 10.","number","",false
"DS_INTERNAL.NEW_FILE_USED_IN_INTERACTIVE","Telemetry event sent when a user runs the interactive window with a new file","Telemetry.NewFileForInteractiveWindow","amunger","InteractiveWindow","","","","","","",""
"DS_INTERNAL.NUMBER_OF_REMOTE_KERNEL_IDS_SAVED","When users connect to a remote kernel, we store the kernel id so we can re-connect to that
when user opens the same notebook. We only store the last 100.
Count is the number of kernels saved in the list.","Telemetry.NumberOfSavedRemoteKernelIds","IanMatthewHuff","KernelPicker","","","count","Count is the number of kernels saved in the list.","number","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DS_INTERNAL.PERCEIVED_JUPYTER_STARTUP_NOTEBOOK","Time take for jupyter server to start and be ready to run first user cell.
(Note: The property `notebook` only gets sent correctly in Jupyter version 2022.8.0 or later)","Telemetry.PerceivedJupyterStartupNotebook","donjayamanne","N/A","KernelStartup","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DS_INTERNAL.PREFERRED_KERNEL","Telemetry sent when we have attempted to find the preferred kernel.","Telemetry.PreferredKernel","IanMatthewHuff","InteractiveWindow, Notebook, KernelPicker","","","hasActiveInterpreter","If we have an active interpreter or not.","boolean","",true
"DS_INTERNAL.PREFERRED_KERNEL","Telemetry sent when we have attempted to find the preferred kernel.","Telemetry.PreferredKernel","IanMatthewHuff","InteractiveWindow, Notebook, KernelPicker","","","language","Language of the target notebook or interactive window","string","",false
"DS_INTERNAL.PREFERRED_KERNEL","Telemetry sent when we have attempted to find the preferred kernel.","Telemetry.PreferredKernel","IanMatthewHuff","InteractiveWindow, Notebook, KernelPicker","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.PREFERRED_KERNEL","Telemetry sent when we have attempted to find the preferred kernel.","Telemetry.PreferredKernel","IanMatthewHuff","InteractiveWindow, Notebook, KernelPicker","","","result","Note if we did or did not find a preferred kernel.","","'found' 
'notfound' 
'failed' ",false
"DS_INTERNAL.PREFERRED_KERNEL_EXACT_MATCH","Send we we complete our preferred kernel match. Matched reason might be 'no match'.","Telemetry.PreferredKernelExactMatch","IanMatthewHuff","KernelPicker","","","matchedReason","How/why the preferred kernel was matched the way it was.","","null or <empty> ",false
"DS_INTERNAL.PYTHON_EXTENSION_INSTALLED_VIA_KERNEL_PICKER","Python extension was attempted to be installed via the kernel picker command.","Telemetry.PythonExtensionInstalledViaKernelPicker","IanMatthewHuff","KernelPicker","","","action","Did the Extension install succeed or fail?","","'success' 
'failed' ",false
"DS_INTERNAL.PYTHON_EXTENSION_NOT_INSTALLED","The kernel picker command to install python extension was shown.","Telemetry.PythonExtensionNotInstalled","IanMatthewHuff","KernelPicker","","","action","The message was displayed, or indicate that the user dismissed or downloaded the message.","","'displayed' 
'dismissed' 
'download' ",false
"DS_INTERNAL.PYTHON_KERNEL_EXECUTABLE_MATCHES","Telemetry sent for local Python Kernels.
Tracking whether we have managed to launch the kernel that matches the interpreter.
If match=false, then this means we have failed to launch the right kernel.","Telemetry.PythonKerneExecutableMatches","donjayamanne","N/A","KernelStartup","","kernelConnectionType","Type of kernel connection, whether its local, remote or a python environment.","","'startUsingLocalKernelSpec' 
'startUsingPythonInterpreter' 
'startUsingRemoteKernelSpec' ",false
"DS_INTERNAL.PYTHON_KERNEL_EXECUTABLE_MATCHES","Telemetry sent for local Python Kernels.
Tracking whether we have managed to launch the kernel that matches the interpreter.
If match=false, then this means we have failed to launch the right kernel.","Telemetry.PythonKerneExecutableMatches","donjayamanne","N/A","KernelStartup","","match","Whether we've managed to correctly identify the Python Environment.","","'true' 
'false' ",false
"DS_INTERNAL.PYTHON_MODULE_INSTALL","Telemetry sent when user is presented with a dialog to install a python package.
Also sent with the user's response to the dialog.","Telemetry.PythonModuleInstall","donjayamanne","N/A","","","action","Action taken by the user or the extension.","","'cancelled' 
'displayed' 
'prompted' 
'installed' 
'ignored' 
'disabled' 
'failed' 
'install' 
'donotinstall' 
'differentKernel' 
'error' 
'installedInJupyter' 
'failedToInstallInJupyter' 
'dismissed' 
'moreInfo' ",false
"DS_INTERNAL.PYTHON_MODULE_INSTALL","Telemetry sent when user is presented with a dialog to install a python package.
Also sent with the user's response to the dialog.","Telemetry.PythonModuleInstall","donjayamanne","N/A","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.PYTHON_MODULE_INSTALL","Telemetry sent when user is presented with a dialog to install a python package.
Also sent with the user's response to the dialog.","Telemetry.PythonModuleInstall","donjayamanne","N/A","","","isModulePresent","Whether the module was already (once before) installed into the python environment or
whether this already exists (detected via `pip list`)","","'true' 
null or <empty> ",true
"DS_INTERNAL.PYTHON_MODULE_INSTALL","Telemetry sent when user is presented with a dialog to install a python package.
Also sent with the user's response to the dialog.","Telemetry.PythonModuleInstall","donjayamanne","N/A","","","moduleName","Name of the python module to be installed.","string","",false
"DS_INTERNAL.PYTHON_MODULE_INSTALL","Telemetry sent when user is presented with a dialog to install a python package.
Also sent with the user's response to the dialog.","Telemetry.PythonModuleInstall","donjayamanne","N/A","","","pythonEnvType","Type of the python environment.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.PYTHON_MODULE_INSTALL","Telemetry sent when user is presented with a dialog to install a python package.
Also sent with the user's response to the dialog.","Telemetry.PythonModuleInstall","donjayamanne","N/A","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.","string","",true
"DS_INTERNAL.PYTHON_MODULE_INSTALL","Telemetry sent when user is presented with a dialog to install a python package.
Also sent with the user's response to the dialog.","Telemetry.PythonModuleInstall","donjayamanne","N/A","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.PYTHON_NOT_INSTALLED","The kernel picker command to install python was shown.","Telemetry.PythonNotInstalled","IanMatthewHuff","KernelPicker","","","action","The message was displayed, or indicate that the user dismissed or downloaded the message.","","'displayed' 
'dismissed' 
'download' ",false
"DS_INTERNAL.RANK_KERNELS_PERF","Time taken to load kernels if needed and rank them all.","Telemetry.RankKernelsPerf","IanMatthewHuff","KernelPicker","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.RAWKERNEL_CREATING_NOTEBOOK","Telemetry send when we create a notebook for a raw kernel or jupyter","Telemetry.RawKernelCreatingNotebook","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","attempts","Total number of attempts and sending a request and waiting for response.","number","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","timedout","Whether we timedout while waiting for response for Kernel info request.","boolean","",false
"DS_INTERNAL.RAWKERNEL_INFO_RESPONSE","After starting a kernel we send a request to get the kernel info.
This tracks the total time taken to get the response back (or wether we timedout).
If we timeout and later we find successful comms for this session, then timeout is too low
or we need more attempts.","Telemetry.RawKernelInfoResponse","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_PROCESS_LAUNCH","Sent to measure time taken to spawn the raw kernel process.","Telemetry.RawKernelProcessLaunch","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_CONNECT","Sent to measure the total time taken to start and connect to a raw kernel session.","Telemetry.RawKernelSessionConnect","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","stacktrace","This is the callstack at the time that the `dispose` method
is called, intended for us to be able to identify who called
`dispose` on the RawSession.","","null or <empty> ",false
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_DISPOSED","This event is sent when a RawSession's `dispose` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionDisposed","donjayamanne","Notebook, InteractiveWindow","","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","exitCode","The kernel process's exit code.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","exitReason","The kernel process's exit reason, based on the error
object's reason","","null or <empty> ",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_KERNEL_PROCESS_EXITED","This event is sent when the underlying kernelProcess for a
RawJupyterSession exits.","Telemetry.RawKernelSessionKernelProcessExited","donjayamanne","Notebook, InteractiveWindow","","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_NO_IPYKERNEL","Telemetry event sent when raw kernel startup fails due to missing ipykernel dependency.
This is useful to see what the user does with this error message.","Telemetry.RawKernelSessionStartNoIpykernel","donjayamanne","Notebook, InteractiveWindow","","","reason","Captures the result of the error message, whether user dismissed this or picked a new kernel or the like.","","0 (Enum Member: KernelInterpreterDependencyResponse.ok,Could mean dependencies are already installed
or user clicked ok to install and it got installed.)
1 (Enum Member: KernelInterpreterDependencyResponse.cancel)
2 (Enum Member: KernelInterpreterDependencyResponse.failed)
3 (Enum Member: KernelInterpreterDependencyResponse.selectDifferentKernel,User chose to select a different kernel.)
4 (Enum Member: KernelInterpreterDependencyResponse.uiHidden,Missing dependencies not installed and UI not displayed to the user
as the kernel startup is part of a background process.
In such cases we do not notify user of any failures or the like.)",false
"DS_INTERNAL.RAWKERNEL_SESSION_NO_IPYKERNEL","Telemetry event sent when raw kernel startup fails due to missing ipykernel dependency.
This is useful to see what the user does with this error message.","Telemetry.RawKernelSessionStartNoIpykernel","donjayamanne","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","isRequestToShutdownRestartSession","This indicates whether the session being shutdown is a restart session.","","true 
false 
null or <empty> ",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","stacktrace","This is the callstack at the time that the `shutdownSession`
method is called, intended for us to be ale to identify who
tried to shutdown the session.","","null or <empty> ",false
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_SHUTDOWN","This event is sent when a RawJupyterSession's `shutdownSession` method is called.
Used to determine what part of the code that shut down the session, so as to determine when and how the kernel session crashed.","Telemetry.RawKernelSessionShutdown","donjayamanne","Notebook, InteractiveWindow","","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","When started successfully. ","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","failed","Whether there was a failure.
Common to most of the events.","true","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","failureCategory","A reason that we generate (e.g. kerneldied, noipykernel, etc), more like a category of the error.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","failureSubCategory","Further sub classification of the error. E.g. kernel died due to the fact that zmq is not installed properly.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","pythonErrorFile","Hash of the file name that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","pythonErrorFolder","Hash of the folder that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","pythonErrorPackage","Hash of the module that contains the file in the last frame (from Python stack trace).
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","stackTrace","Node stacktrace without PII.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START","Telemetry sent when we start (or fail to start) a raw kernel","Telemetry.RawKernelSessionStart","donjayamanne","Notebook, InteractiveWindow","","Sent when we fail to restart a kernel. ","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DS_INTERNAL.RAWKERNEL_SESSION_START_USER_CANCEL","Telemetry event sent to indicate the fact that the kernel failed to start as the user canceled it in some way.
E.g. possible the user chose another kernel or the like.","Telemetry.RawKernelSessionStartUserCancel","donjayamanne","Notebook, InteractiveWindow","","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DS_INTERNAL.RAWKERNEL_START_RAW_SESSION","Sent to measure the time taken to start a raw kernel session.","Telemetry.RawKernelStartRawSession","donjayamanne","Notebook, InteractiveWindow","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.REGISTER_AND_USE_INTERPRETER_AS_KERNEL","Similar to `Telemetry.RegisterInterpreterAsKernel`.
But sent when we have successfully registered the interpreter as a kernel.","Telemetry.RegisterAndUseInterpreterAsKernel","donjayamanne","N/A","KernelStartup","","","","","",""
"DS_INTERNAL.RESTART_KERNEL","Total time taken to restart a kernel.","Telemetry.RestartKernel","donjayamanne","InteractiveWindow, Notebook","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.RUNTEST","A automated test has been run","Telemetry.RunTest","amunger","N/A","","","commitHash","The git commit that the test was run against.","string","",true
"DS_INTERNAL.RUNTEST","A automated test has been run","Telemetry.RunTest","amunger","N/A","","","perfWarmup","If the test was an initial run to warmup the product.","'true'","",true
"DS_INTERNAL.RUNTEST","A automated test has been run","Telemetry.RunTest","amunger","N/A","","","testName","The name of the test.","string","",false
"DS_INTERNAL.RUNTEST","A automated test has been run","Telemetry.RunTest","amunger","N/A","","","testResult","Whether the test passed or failed.","string","",false
"DS_INTERNAL.RUNTEST","A automated test has been run","Telemetry.RunTest","amunger","N/A","","","timedCheckpoints","Timings for segments of the test.","string","",true
"DS_INTERNAL.SELECT_JUPYTER_INTERPRETER","Sent when we notify the user to select an interpreter to start jupyter server
Also sent after the user makes a selection to start the jupyter server.","Telemetry.SelectJupyterInterpreter","donjayamanne","N/A","KernelStartup","","result","If the value or `result` is empty this means we displayed the message to the user and user hasn't made a choice yet.

The result of the selection.
notSelected - No interpreter was selected.
selected - An interpreter was selected (and configured to have jupyter and notebook).
installationCancelled - Installation of jupyter and/or notebook was cancelled for an interpreter.
selectAnotherInterpreter - Selected another interpreter.","","'notSelected' 
'selected' 
'installationCancelled' 
'selectAnotherInterpreter' ",true
"DS_INTERNAL.SETTINGS","The list of settings a user has set. Sent on activation.","Telemetry.DataScienceSettings","amunger","N/A","","","settingsJson","A json representation of settings that the user has set.
The values for string based settings are transalted to 'default' | 'non-default' unless white-listed.","string","",false
"DS_INTERNAL.SHIFTENTER_BANNER_SHOWN","Information banner displayed to give the user the option to configure shift+enter for the Interactive Window.","Telemetry.ShiftEnterBannerShown","amunger","InteractiveWindow","","","","","","",""
"DS_INTERNAL.SHOW_DATA_NO_PANDAS","User tried to open the data viewer and Pandas package was not installed.
Note: Not a failure state, as we prompt for install after this.","Telemetry.PandasNotInstalled","IanMatthewHuff","DataFrameViewer","","","","","","",""
"DS_INTERNAL.SHOW_DATA_PANDAS_INSTALL_CANCELED","When opening the data viewer the user was prompted to install / upgrade
pandas and choose to cancel the operation.","Telemetry.PandasInstallCanceled","IanMatthewHuff","DataFrameViewer","","","","","","",""
"DS_INTERNAL.SHOW_DATA_PANDAS_OK","When opening the data viewer the version of Pandas installed was ok.","Telemetry.PandasOK","IanMatthewHuff","DataFrameViewer","","","","","","",""
"DS_INTERNAL.SHOW_DATA_PANDAS_TOO_OLD","When opening the data viewer the version of Pandas installed was too old.","Telemetry.PandasTooOld","IanMatthewHuff","DataFrameViewer","","","","","","",""
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DS_INTERNAL.START_EXECUTE_NOTEBOOK_CELL_PERCEIVED_COLD","Time take for jupyter server to be busy from the time user first hit `run` cell until jupyter reports it is busy running a cell.","Telemetry.StartExecuteNotebookCellPerceivedCold","donjayamanne","N/A","KernelStartup","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DS_INTERNAL.START_JUPYTER_PROCESS","Time taken to start the Jupyter server.","Telemetry.StartJupyterProcess","donjayamanne","N/A","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.START_SESSION_FAILED_JUPYTER","Telemetry event sent when starting a session for a local connection failed.","Telemetry.StartSessionFailedJupyter","donjayamanne","N/A","KernelStartup","","","","","",""
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","actionSource","Whether this was started by Jupyter extension or a 3rd party.
Common to most of the events.","","jupyterExtension ()
3rdPartyExtension ()",false
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","capturedEnvVars","Whether we managed to capture the environment variables or not.
In the case of conda environments, `false` would be an error condition, as we must have env variables for conda to work.
Common to most of the events.","boolean","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","disableUI","Whether the notebook startup UI (progress indicator & the like) was displayed to the user or not.
If its not displayed, then its considered an auto start (start in the background, like pre-warming kernel)
Common to most of the events.","boolean","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","interruptCount","This number gets reset after we attempt a restart or change kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","isUsingActiveInterpreter","Whether this resource is using the active Python interpreter or not.
Common to most of the events.","boolean","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","kernelConnectionType","Whether kernel was started using kernel spec, interpreter, etc.
Common to most of the events.","KernelConnectionMetadata['kind']","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","kernelId","Hash of the Kernel Connection id.
Common to most of the events.","string","",false
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","kernelInterpreterCount","Total number of interpreters in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","kernelLanguage","Language of the kernel connection.
Common to most of the events.","string","",false
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","kernelLiveCount","Total number of live kernels in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","kernelSessionId","Unique identifier for an instance of a notebook session.
If we restart or run this notebook tomorrow, this id will be different.
Id could be something as simple as a hash of the current Epoch time.
Common to most of the events.","string","",false
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","kernelSpecCount","Total number of kernel specs in the kernel spec list.
Common to most of the events.","number","",false
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","pythonEnvironmentCount","Total number of python environments.
Common to most of the events.","number","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","pythonEnvironmentPackages","Comma delimited list of hashed packages & their versions.
Common to most of the events.","string","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","pythonEnvironmentPath","A key, so that rest of the information is tied to this. (hash)
Common to most of the events.","string","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","pythonEnvironmentType","Found plenty of issues when starting kernels with conda, hence useful to capture this info.
Common to most of the events.","","Unknown ()
Conda ()
VirtualEnv ()
PipEnv ()
Pyenv ()
Venv ()
WindowsStore ()
Poetry ()
VirtualEnvWrapper ()
Global ()
System ()",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","pythonEnvironmentVersion","Found plenty of issues when starting Conda Python 3.7, Python 3.7 Python 3.9 (in early days when ipykernel was not up to date)
Common to most of the events.","string","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","resourceHash","Hash of the resource (notebook.uri or pythonfile.uri associated with this).
If we run the same notebook tomorrow, the hash will be the same.
Used to check whether a particular notebook fails across time or not.
This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
and have a better understanding of what is going on, e.g. why something failed.
Common to most of the events.","string","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","restartCount","This number gets reset after change the kernel.
Common to most of the events.","number","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","startFailureCount","Number of times starting the kernel failed.
Common to most of the events.","number","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","switchKernelCount","Number of times the kernel was changed.
Common to most of the events.","number","",true
"DS_INTERNAL.SWITCH_KERNEL","Triggered when the kernel selection changes (note: This can also happen automatically when a notebook is opened).
WARNING: Due to changes in VS Code, this isn't necessarily a user action, hence difficult to tell if the user changed it or it changed automatically.","Telemetry.SwitchKernel","IanMatthewHuff","Notebook, InteractiveWindow","","","userExecutedCell","Whether the user executed a cell.
Common to most of the events.","boolean","",true
"DS_INTERNAL.VARIABLE_EXPLORER_FETCH_TIME","How long did it take for a single variable request to be resolved.","Telemetry.VariableExplorerFetchTime","IanMatthewHuff","VariableViewer","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.VARIABLE_EXPLORER_VARIABLE_COUNT","Count how many variables were in a variable request.","Telemetry.VariableExplorerVariableCount","IanMatthewHuff","VariableViewer","","","variableCount","Count of variables requested","number","",false
"DS_INTERNAL.VSCNOTEBOOK_CELL_TRANSLATION_FAILED","We've failed to translate a Jupyter cell output for serialization into a Notebook cell.","Telemetry.VSCNotebookCellTranslationFailed","donjayamanne","Notebook, InteractiveWindow","","","outputType","Type of the output received from the Jupyter kernel.
This is required to identify output types that we're not mapping correctly.","string","",false
"DS_INTERNAL.WAIT_FOR_IDLE_JUPYTER","Sent to measure the time taken to wait for a Jupyter kernel to be idle.","Telemetry.WaitForIdleJupyter","donjayamanne","N/A","KernelStartup","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.WEBVIEW_STARTUP","We started up a webview.","Telemetry.WebviewStartup","IanMatthewHuff","N/A","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"DS_INTERNAL.WEBVIEW_STARTUP","We started up a webview.","Telemetry.WebviewStartup","IanMatthewHuff","N/A","","","type","The type of webview started up.","string","",false
"DS_INTERNAL.ZMQ_NATIVE_BINARIES_LOADING","Telemetry event sent when the ZMQ native binaries do work.","Telemetry.ZMQSupported","donjayamanne","N/A","KernelStartup","","","","","",""
"DS_INTERNAL.ZMQ_NATIVE_BINARIES_NOT_LOADING","Telemetry event sent when the ZMQ native binaries do not work.","Telemetry.ZMQNotSupported","donjayamanne","N/A","KernelStartup","","","","","",""
"ENVFILE_VARIABLE_SUBSTITUTION","Telemetry event sent when substituting Environment variables to calculate value of variables.
E.g. user has a a .env file with tokens that need to be replaced with env variables.
such as an env file having the variable `${HOME}`.
Gives us an idea of whether users have variable references in their .env files or not.","EventName.ENVFILE_VARIABLE_SUBSTITUTION","donjayamanne","N/A","","","","","","",""
"ENVFILE_WORKSPACE","Telemetry event sent when an environment file is detected in the workspace.","EventName.ENVFILE_WORKSPACE","donjayamanne","N/A","","","","","","",""
"EXTENSION.LOAD","Telemetry event sent with perf measures related to activation and loading of extension.","EventName.EXTENSION_LOAD","donjayamanne","N/A","","","codeLoadingTime","Time taken to load the code.","number","",false
"EXTENSION.LOAD","Telemetry event sent with perf measures related to activation and loading of extension.","EventName.EXTENSION_LOAD","donjayamanne","N/A","","","endActivateTime","Time when activation completed.","number","",false
"EXTENSION.LOAD","Telemetry event sent with perf measures related to activation and loading of extension.","EventName.EXTENSION_LOAD","donjayamanne","N/A","","","startActivateTime","Time when activation started.","number","",false
"EXTENSION.LOAD","Telemetry event sent with perf measures related to activation and loading of extension.","EventName.EXTENSION_LOAD","donjayamanne","N/A","","","totalActivateTime","Time taken to activate the extension.","number","",false
"EXTENSION.LOAD","Telemetry event sent with perf measures related to activation and loading of extension.","EventName.EXTENSION_LOAD","donjayamanne","N/A","","","workspaceFolderCount","Number of workspace folders opened","number","",false
"HASHED_PACKAGE_NAME","Telemetry event sent with hash of an imported python package.
Used to detect the popularity of a package, that would help determine which packages
need to be prioritized when resolving issues with intellisense or supporting similar issues related to a (known) specific package.","EventName.HASHED_PACKAGE_NAME","donjayamanne","N/A","","","hashedNamev2","Hash of the package name","string","",false
"HASHED_PACKAGE_NAME","Telemetry event sent with hash of an imported python package.
Used to detect the popularity of a package, that would help determine which packages
need to be prioritized when resolving issues with intellisense or supporting similar issues related to a (known) specific package.","EventName.HASHED_PACKAGE_NAME","donjayamanne","N/A","","","resourceType","Used to determine whether this event is related to a Notebooks or Interactive window.
Common to most of the events.","","'notebook' 
'interactive' ",true
"HASHED_PACKAGE_NAME","Telemetry event sent with hash of an imported python package.
Used to detect the popularity of a package, that would help determine which packages
need to be prioritized when resolving issues with intellisense or supporting similar issues related to a (known) specific package.","EventName.HASHED_PACKAGE_NAME","donjayamanne","N/A","","","when","Whether the package was detected in an existing file (upon open, upon save, upon close) or when it was being used during execution.","","'onExecution' 
'onOpenCloseOrSave' ",false
"HASHED_PACKAGE_PERF","Time taken to hash python packages found in the code.","EventName.HASHED_PACKAGE_PERF","donjayamanne","N/A","","","duration","Duration of a measure in milliseconds.
Common measurement used across a number of events.","number","",false
"JUPYTER_IS_INSTALLED","Telemetry sent with result of detecting Jupyter in the current path.","Telemetry.JupyterInstalled","donjayamanne","N/A","","/* Detection of jupyter failed ","failed","Failed to detect Jupyter.","true","",false
"JUPYTER_IS_INSTALLED","Telemetry sent with result of detecting Jupyter in the current path.","Telemetry.JupyterInstalled","donjayamanne","N/A","","/* Detection of jupyter failed ","frontEnd","Whether this is jupyter lab or notebook.","","'notebook' 
'lab' ",false
"JUPYTER_IS_INSTALLED","Telemetry sent with result of detecting Jupyter in the current path.","Telemetry.JupyterInstalled","donjayamanne","N/A","","/* Detection of jupyter failed ","reason","Reason for failure.","'notInstalled'","",false
"JUPYTER_IS_INSTALLED","Telemetry sent with result of detecting Jupyter in the current path.","Telemetry.JupyterInstalled","donjayamanne","N/A","","Jupyter was successfully detected ","detection","Jupyter is in current path of process owned by VS Code.
I.e. jupyter can be found in the path as defined by the env variable process.env['PATH'].","'process'","",false
"JUPYTER_IS_INSTALLED","Telemetry sent with result of detecting Jupyter in the current path.","Telemetry.JupyterInstalled","donjayamanne","N/A","","Jupyter was successfully detected ","frontEnd","Whether this is jupyter lab or notebook.","","'notebook' 
'lab' ",false
"JUPYTER_IS_INSTALLED","Telemetry sent with result of detecting Jupyter in the current path.","Telemetry.JupyterInstalled","donjayamanne","N/A","","Jupyter was successfully detected ","frontEndVersion","Version of the form 6.11, 4.8","number","",false
"OPEN_DATAVIEWER_FROM_VARIABLE_WINDOW_ERROR_EX","Telemetry event sent when user opens the data viewer via the variable view and there is an error in doing so.","EventName.OPEN_DATAVIEWER_FROM_VARIABLE_WINDOW_ERROR","IanMatthewHuff","DataFrameViewer, VariableViewer","","","","","","",""
"OPEN_DATAVIEWER_FROM_VARIABLE_WINDOW_REQUEST_EX","Telemetry event sent when user opens the data viewer via the variable view.","EventName.OPEN_DATAVIEWER_FROM_VARIABLE_WINDOW_REQUEST","IanMatthewHuff","DataFrameViewer, VariableViewer","","","","","","",""
"OPEN_DATAVIEWER_FROM_VARIABLE_WINDOW_SUCCESS_EX","Telemetry event sent when user opens the data viewer via the variable view and we successfully open the view.","EventName.OPEN_DATAVIEWER_FROM_VARIABLE_WINDOW_SUCCESS","IanMatthewHuff","DataFrameViewer, VariableViewer","","","","","","",""