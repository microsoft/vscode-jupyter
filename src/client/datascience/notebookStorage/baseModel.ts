// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

import { nbformat } from '@jupyterlab/coreutils/lib/nbformat';
import { KernelMessage } from '@jupyterlab/services';
import * as fastDeepEqual from 'fast-deep-equal';
import { cloneDeep } from 'lodash';
import { EventEmitter, Memento, Uri } from 'vscode';
import { PYTHON_LANGUAGE } from '../../common/constants';
import { getInterpreterHash } from '../../pythonEnvironments/info/interpreter';
import { defaultNotebookFormat } from '../constants';
import {
    getInterpreterFromKernelConnectionMetadata,
    isKernelRegisteredByUs,
    isPythonKernelConnection,
    kernelConnectionMetadataHasKernelModel
} from '../jupyter/kernels/helpers';
import { KernelConnectionMetadata } from '../jupyter/kernels/types';
import { INotebookModel } from '../types';

// eslint-disable-next-line complexity
export function updateNotebookMetadata(
    metadata?: nbformat.INotebookMetadata,
    kernelConnection?: KernelConnectionMetadata,
    kernelInfo?: Partial<KernelMessage.IInfoReplyMsg['content']>
) {
    let changed = false;
    let kernelId: string | undefined;
    if (!metadata) {
        return { changed, kernelId };
    }

    // If language isn't specified in the metadata, ensure we have that.
    if (!metadata?.language_info?.name) {
        metadata = metadata || <nbformat.INotebookMetadata>{ orig_nbformat: 3, language_info: { name: '' } };
        metadata.language_info = metadata.language_info || { name: '' };
    }

    let language: string | undefined;
    switch (kernelConnection?.kind) {
        case 'connectToLiveKernel':
            language = kernelConnection.kernelModel.language;
            break;
        case 'startUsingKernelSpec':
            language = kernelConnection.kernelSpec.language;
            break;
        case 'startUsingPythonInterpreter':
            language = PYTHON_LANGUAGE;
            break;
        default:
            break;
    }
    if (metadata.language_info.name !== language && language) {
        metadata.language_info.name = language;
        changed = true;
    }

    if (kernelInfo && 'language_info' in kernelInfo && kernelInfo.language_info) {
        if (!fastDeepEqual(metadata.language_info, kernelInfo.language_info)) {
            metadata.language_info = cloneDeep(kernelInfo.language_info);
            changed = true;
        }
    } else {
        // Get our kernel_info and language_info from the current notebook
        const isPythonConnection = isPythonKernelConnection(kernelConnection);
        const interpreter = isPythonConnection
            ? getInterpreterFromKernelConnectionMetadata(kernelConnection)
            : undefined;
        if (
            interpreter &&
            interpreter.version &&
            metadata &&
            metadata.language_info &&
            metadata.language_info.version !== interpreter.version.raw
        ) {
            metadata.language_info.version = interpreter.version.raw;
            changed = true;
        } else if (!interpreter && metadata?.language_info && isPythonConnection) {
            // It's possible, such as with raw kernel and a default kernelspec to not have interpreter info
            // for this case clear out old invalid language_info entries as they are related to the previous execution
            // However we should clear previous language info only if language is python, else just leave it as is.
            metadata.language_info = undefined;
            changed = true;
        }
    }

    const kernelSpecOrModel =
        kernelConnection && kernelConnectionMetadataHasKernelModel(kernelConnection)
            ? kernelConnection.kernelModel
            : kernelConnection?.kernelSpec;
    if (kernelConnection?.kind === 'startUsingPythonInterpreter') {
        // Store interpreter name, we expect the kernel finder will find the corresponding interpreter based on this name.
        const kernelSpec = kernelConnection.kernelSpec;
        const displayName = kernelConnection.interpreter.displayName || '';
        // If kernel spec is generated by us, then always store `python3` in the notebook (so that its portable).
        const name = isKernelRegisteredByUs(kernelSpec) ? 'python3' : kernelSpec.name;

        if (metadata.kernelspec?.name !== name || metadata.kernelspec?.display_name !== name) {
            changed = true;
            metadata.kernelspec = {
                name,
                display_name: displayName
            };
            if (isKernelRegisteredByUs(kernelSpec)) {
                // For kernels generated by us, store the interpreter information.
                // We'll leave the kernel spec name as `python3`, this way it will work even in Jupyter or the like.
                // Else if user opens a notebook that works in jupter,
                // then in ours they cannot go back to jupyter as `python<hash>` is not necessarily a valid kernel in jupter.
                metadata.interpreter = {
                    hash: getInterpreterHash(kernelConnection.interpreter)
                };
            }
        }
    } else if (kernelSpecOrModel && !metadata.kernelspec) {
        // Add a new spec in this case
        metadata.kernelspec = {
            name: kernelSpecOrModel.name || kernelSpecOrModel.display_name || '',
            display_name: kernelSpecOrModel.display_name || kernelSpecOrModel.name || ''
        };
        kernelId = kernelSpecOrModel.id;
        changed = true;
    } else if (kernelSpecOrModel && metadata.kernelspec) {
        // Spec exists, just update name and display_name
        const name = kernelSpecOrModel.name || kernelSpecOrModel.display_name || '';
        const displayName = kernelSpecOrModel.display_name || kernelSpecOrModel.name || '';
        const language = kernelSpecOrModel.language || kernelSpecOrModel.language || '';
        if (
            metadata.kernelspec.name !== name ||
            metadata.kernelspec.language !== language ||
            metadata.kernelspec.display_name !== displayName ||
            kernelId !== kernelSpecOrModel.id
        ) {
            changed = true;
            metadata.kernelspec.name = name;
            metadata.kernelspec.display_name = displayName;
            metadata.kernelspec.language = language;
            kernelId = kernelSpecOrModel.id;
        }
        try {
            // This is set only for when we select an interpreter.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            delete (metadata.kernelspec as any).metadata;
        } catch {
            // Noop.
        }
    }
    return { changed, kernelId };
}

export function getDefaultNotebookContent(pythonNumber: number = 3): Partial<nbformat.INotebookContent> {
    // Use this to build our metadata object
    // Use these as the defaults unless we have been given some in the options.
    const metadata: nbformat.INotebookMetadata = {
        language_info: {
            codemirror_mode: {
                name: 'ipython',
                version: pythonNumber
            },
            file_extension: '.py',
            mimetype: 'text/x-python',
            name: 'python',
            nbconvert_exporter: 'python',
            pygments_lexer: `ipython${pythonNumber}`,
            version: pythonNumber
        },
        orig_nbformat: defaultNotebookFormat.major
    };

    // Default notebook data.
    return {
        metadata: metadata,
        nbformat: defaultNotebookFormat.major,
        nbformat_minor: defaultNotebookFormat.minor
    };
}

export abstract class BaseNotebookModel implements INotebookModel {
    public get file(): Uri {
        return this._file;
    }
    protected _disposed = new EventEmitter<void>();
    protected _isDisposed?: boolean;
    protected _kernelConnection?: KernelConnectionMetadata;
    constructor(
        protected _file: Uri,
        protected globalMemento: Memento,
        protected notebookJson: Partial<nbformat.INotebookContent> = {},
        public readonly indentAmount: string = ' ',
        private readonly pythonNumber: number = 3,
        initializeJsonIfRequired = true
    ) {
        // VSCode Notebook Model will execute this itself.
        // THe problem is we need to override this behavior, however the overriding doesn't work in JS
        // as some of the dependencies passed as ctor arguments are not available in the ctor.
        // E.g. in the ctor of the base class, the private members (passed as ctor ares) initialized in child class are not available (unlike other languages).
        if (initializeJsonIfRequired) {
            this.ensureNotebookJson();
        }
    }
    public dispose() {
        this._isDisposed = true;
        this._disposed.fire();
    }
    protected getDefaultNotebookContent() {
        return getDefaultNotebookContent(this.pythonNumber);
    }

    protected ensureNotebookJson() {
        if (!this.notebookJson || !this.notebookJson.metadata) {
            this.notebookJson = this.getDefaultNotebookContent();
        }
    }
}
