// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { UnionToIntersection } from './platform/common/utils/misc';
import { TelemetryErrorProperties } from './platform/errors/types';
import {
    DurationMeasurement,
    IEventNamePropertyMapping,
    ResourceSpecificTelemetryProperties,
    ResourceTypeTelemetryProperty,
    Telemetry
} from './telemetry';

type Owner = 'donjayamanne' | 'amunger' | 'ianhuf' | 'rebornix' | 'rob';
type YearsOf2020 = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
type FullYear = `202${YearsOf2020}`;
type Months = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12';
type ExtensionVersions = `${FullYear}.${Months}`;

type IEventData = {
    owner: Owner;
    // We extract the jsdoc comments from IEvenNamePropertyMapping found in in telemetry.ts.
    // comment: string;
    expiration?: string;
    /**
     * Extension Version when this event was defined.
     * E.g. during development if we add a new event, this will contain the current dev version from package.json.
     * This will provide a timeline for when we can expect to see this event.
     * (Specific to Jupyter extension, non-gdpr).
     */
    effectiveVersion: 'unknown' | ExtensionVersions;
};
/**
 * Used to define an individual property (data item) of an Event.
 */
type IBasePropertyData = {
    /**
     * EndUserPseudonymizedInformation is what allows us to identify a particular user across time, although we don't know the actual identity of the user. machineId or instanceId fall in this category.
     * PublicPersonalData and PublicNonPersonalData is information that users provide us with, for example, publisher information on the marketplace.
     * CustomerContent is information the user generated such as urls of repositories or custom snippets.
     * CallstackOrException is for error data like callbacks and exceptions. Everything else is SystemMetaData.
     */
    classification:
        | 'SystemMetaData'
        | 'CallstackOrException'
        | 'CustomerContent'
        | 'PublicNonPersonalData'
        | 'EndUserPseudonymizedInformation';
    /**
     * FeatureInsight or PerformanceAndHealth.
     * We only use BusinessInsight for events generated by surveys.
     */
    purpose: 'PerformanceAndHealth' | 'FeatureInsight' | 'BusinessInsight';
    /**
     * Used to specify a reason for collecting the event. This is meant to be more descriptive than `classification` & `purpose`.
     */
    comment: string;
    /**
     * Used if you would like to dictate the max product version this telemetry event should be sent in.
     * This allows external tools to specify which events should be removed from the codebase.
     */
    expiration?: string;
    /**
     * Defaults to none. That's appropriate for pretty much all properties rather than a couple of common properties.
     *
     * @type {string}
     * @memberof IPropertyData
     */
    endpoint?: string;
    /**
     * Extension Version when this event was defined.
     * E.g. during development if we add a new event, this will contain the current dev version from package.json.
     * This will provide a timeline for when we can expect to see this event.
     * (Specific to Jupyter extension, non-gdpr).
     *
     * If undefined, then this means this was added along with the event.
     * If this is an existing event and we add new data, then this must have a value.
     */
    effectiveVersion: 'SameAsEvent' | ExtensionVersions;
};

type IPropertyDataNonMeasurement = IBasePropertyData & {
    /**
     * If numbers to are to be sent, they must be sent as measures.
     */
    isMeasurement?: false;
};
type IPropertyDataMeasurement = IBasePropertyData & {
    /**
     * Numbers are handled differently in the telemetry system.
     */
    isMeasurement: true;
};

/**
 * TelemetryErrorProperties is common to all events, hence the properties of this are common to all events.
 * Similarly `duration` is a common measure that's sent for a lot of events)
 */
type CommonProperties =
    | keyof TelemetryErrorProperties
    | keyof DurationMeasurement
    | keyof ResourceTypeTelemetryProperty;

/**
 * This will include all of the properties for an Event.
 * This will also include common properties such as error properties, duration, etc.
 */
type AllEventPropertiesData<T> = {
    [P in keyof Required<T>]: Required<T>[P] extends number ? IPropertyDataMeasurement : IPropertyDataNonMeasurement;
};

/**
 * This will include all of the properties for an Event, excluding the common properties.
 * These are the properties that need to be documented and defined.
 */
type EventPropertiesData<T> = Omit<AllEventPropertiesData<T>, CommonProperties>;

type GDPREventDefinition<T> = EventPropertiesData<T> extends undefined
    ? IEventData
    : IEventData & EventPropertiesData<T>;

type AllGDPREventDefinitions<T extends IEventNamePropertyMapping = IEventNamePropertyMapping> = {
    [P in keyof IEventNamePropertyMapping]: GDPREventDefinition<UnionToIntersection<T[P]>>;
};
const commonClassificationForDurationProperties: AllEventPropertiesData<DurationMeasurement> = {
    duration: {
        classification: 'PublicNonPersonalData',
        comment: '',
        purpose: 'PerformanceAndHealth',
        isMeasurement: true,
        effectiveVersion: 'SameAsEvent'
    }
};
const commonClassificationForResourceType: AllEventPropertiesData<ResourceTypeTelemetryProperty> = {
    resourceType: {
        classification: 'PublicNonPersonalData',
        comment: '',
        purpose: 'FeatureInsight',
        effectiveVersion: 'SameAsEvent'
    }
};
const commonClassificationForErrorProperties: AllEventPropertiesData<TelemetryErrorProperties> = {
    failed: {
        classification: 'PublicNonPersonalData',
        comment: '',
        purpose: 'PerformanceAndHealth',
        effectiveVersion: 'SameAsEvent'
    },
    failureCategory: {
        classification: 'PublicNonPersonalData',
        comment: '',
        purpose: 'PerformanceAndHealth',
        effectiveVersion: 'SameAsEvent'
    },
    failureSubCategory: {
        classification: 'PublicNonPersonalData',
        comment: '',
        purpose: 'PerformanceAndHealth',
        effectiveVersion: 'SameAsEvent'
    },
    pythonErrorFile: {
        classification: 'PublicNonPersonalData',
        comment: '',
        purpose: 'PerformanceAndHealth',
        effectiveVersion: 'SameAsEvent'
    },
    pythonErrorFolder: {
        classification: 'PublicNonPersonalData',
        comment: '',
        purpose: 'PerformanceAndHealth',
        effectiveVersion: 'SameAsEvent'
    },
    pythonErrorPackage: {
        classification: 'PublicNonPersonalData',
        comment: '',
        purpose: 'PerformanceAndHealth',
        effectiveVersion: 'SameAsEvent'
    },
    stackTrace: {
        classification: 'PublicNonPersonalData',
        comment: '',
        purpose: 'PerformanceAndHealth',
        effectiveVersion: 'SameAsEvent'
    }
};
const commonClassificationForResourceSpecificTelemetryProperties: AllEventPropertiesData<ResourceSpecificTelemetryProperties> =
    {
        actionSource: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            effectiveVersion: 'SameAsEvent'
        },
        disableUI: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            effectiveVersion: 'SameAsEvent'
        },
        interruptCount: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            isMeasurement: true,
            effectiveVersion: 'SameAsEvent'
        },
        userExecutedCell: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            effectiveVersion: 'SameAsEvent'
        },
        switchKernelCount: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            isMeasurement: true,
            effectiveVersion: 'SameAsEvent'
        },
        startFailureCount: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            isMeasurement: true,
            effectiveVersion: 'SameAsEvent'
        },
        restartCount: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            isMeasurement: true,
            effectiveVersion: 'SameAsEvent'
        },
        resourceHash: {
            classification: 'PublicNonPersonalData',
            comment: `Hash of the Notebook or Interactive Window URI. Used to check whether a particular notebook fails across time or not.
            This is also used to map different telemetry events related to this same resource. E.g. we could have an event sent for starting a notebook with this hash,
            and then later we get yet another event indicating starting a notebook failed. And another event indicating the Python environment used for this notebook is a conda environment or
            we have some other event indicating some other piece of data for this resource. With the information across multiple resources we can now join the different data points
            and have a better understanding of what is going on, e.g. why something failed.`,
            purpose: 'PerformanceAndHealth',
            effectiveVersion: 'SameAsEvent'
        },
        pythonEnvironmentVersion: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            effectiveVersion: 'SameAsEvent'
        },
        pythonEnvironmentType: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            effectiveVersion: 'SameAsEvent'
        },
        pythonEnvironmentPath: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            effectiveVersion: 'SameAsEvent'
        },
        pythonEnvironmentPackages: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            effectiveVersion: 'SameAsEvent'
        },
        pythonEnvironmentCount: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            isMeasurement: true,
            effectiveVersion: 'SameAsEvent'
        },
        kernelSpecCount: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            isMeasurement: true,
            effectiveVersion: 'SameAsEvent'
        },
        kernelSessionId: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            effectiveVersion: 'SameAsEvent'
        },
        kernelLiveCount: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            isMeasurement: true,
            effectiveVersion: 'SameAsEvent'
        },
        kernelLanguage: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            effectiveVersion: 'SameAsEvent'
        },
        kernelInterpreterCount: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            isMeasurement: true,
            effectiveVersion: 'SameAsEvent'
        },
        kernelId: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            effectiveVersion: 'SameAsEvent'
        },
        kernelConnectionType: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            effectiveVersion: 'SameAsEvent'
        },
        isUsingActiveInterpreter: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            effectiveVersion: 'SameAsEvent'
        },
        capturedEnvVars: {
            classification: 'PublicNonPersonalData',
            comment: '',
            purpose: 'PerformanceAndHealth',
            effectiveVersion: 'SameAsEvent'
        },
        ...commonClassificationForResourceType
    };

export const commonClassifications = Object.assign(
    {},
    commonClassificationForResourceSpecificTelemetryProperties,
    commonClassificationForDurationProperties,
    commonClassificationForResourceType,
    commonClassificationForErrorProperties
);

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const GDPRData: AllGDPREventDefinitions = {
    [Telemetry.CodeLensAverageAcquisitionTime]: {
        owner: 'amunger',
        effectiveVersion: 'unknown'
    }
};
